{"version":3,"file":"serenity-slick.js","sourceRoot":"","sources":["../../CoreLib/SlickGrid/Event.ts","../../CoreLib/SlickGrid/Grouping.ts","../../CoreLib/SlickGrid/Formatter.ts","../../CoreLib/SlickGrid/Column.ts","../../CoreLib/SlickGrid/GridOptions.ts","../../CoreLib/SlickGrid/Grid.ts","../../CoreLib/SlickGrid/Aggregators.ts","../../CoreLib/SlickGrid/RemoteView.ts","../../CoreLib/SlickGrid/Autotooltips.ts","../../CoreLib/SlickGrid/RowMoveManager.ts"],"names":[],"mappings":"AMCA,IAAU,KAAK,CAoId;AApID,WAAU,KAAK;IAAC,IAAA,WAAW,CAoI1B;IApIe,WAAA,WAAW;QAEvB,SAAgB,GAAG,CAAC,KAAa;YAC7B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YAEpB,IAAI,CAAC,IAAI,GAAG;gBACR,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;gBAChB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;gBACvB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;YAClB,CAAC,CAAC;YAEF,IAAI,CAAC,UAAU,GAAG,UAAU,IAAS;gBACjC,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC5B,IAAI,CAAC,MAAM,EAAE,CAAC;gBACd,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;oBAC1C,IAAI,CAAC,aAAa,EAAE,CAAC;oBACrB,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC;iBAChC;YACL,CAAC,CAAC;YAEF,IAAI,CAAC,WAAW,GAAG,UAAU,WAAgB;gBACzC,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE;oBAClB,WAAW,CAAC,GAAG,GAAG,EAAE,CAAC;iBACxB;gBACD,IAAI,IAAI,CAAC,aAAa,IAAI,CAAC,EAAE;oBACzB,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC;iBACjE;YACL,CAAC,CAAC;QACN,CAAC;QA1Be,eAAG,MA0BlB,CAAA;QAED,SAAgB,WAAW,CAAC,KAAa,EAAE,aAAqB;YAC5D,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;YAEpC,IAAI,CAAC,IAAI,GAAG;gBACR,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;gBACd,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;YAC1B,CAAC,CAAC;YAEF,IAAI,CAAC,UAAU,GAAG,UAAU,IAAS;gBACjC,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC5B,IAAI,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBAC5C,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;oBAChD,IAAI,CAAC,YAAY,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC;oBAC7C,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;iBAC1D;YACL,CAAC,CAAC;YAEF,IAAI,CAAC,WAAW,GAAG,UAAU,WAAgB;gBACzC,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE;oBAClB,WAAW,CAAC,GAAG,GAAG,EAAE,CAAC;iBACxB;gBAED,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,YAAY,EAAE;oBAChC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC;iBAChE;YACL,CAAC,CAAC;YAEF,IAAI,CAAC,OAAO,GAAG,UAAU,GAAQ;gBAC7B,OAAO,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACrD,CAAC,CAAC;QACN,CAAC;QA/Be,uBAAW,cA+B1B,CAAA;QAED,SAAgB,GAAG,CAAC,KAAa;YAC7B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YAEpB,IAAI,CAAC,IAAI,GAAG;gBACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACrB,CAAC,CAAC;YAEF,IAAI,CAAC,UAAU,GAAG,UAAU,IAAS;gBACjC,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC5B,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;oBAC1C,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,EAAE;wBACtC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;qBACnB;iBACJ;YACL,CAAC,CAAC;YAEF,IAAI,CAAC,WAAW,GAAG,UAAU,WAAgB;gBACzC,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE;oBAClB,WAAW,CAAC,GAAG,GAAG,EAAE,CAAC;iBACxB;gBACD,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;YAC7C,CAAC,CAAA;QACL,CAAC;QAtBe,eAAG,MAsBlB,CAAA;QAED,SAAgB,GAAG,CAAC,KAAa;YAC7B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YAEpB,IAAI,CAAC,IAAI,GAAG;gBACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACrB,CAAC,CAAC;YAEF,IAAI,CAAC,UAAU,GAAG,UAAU,IAAS;gBACjC,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC5B,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;oBAC1C,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,EAAE;wBACtC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;qBACnB;iBACJ;YACL,CAAC,CAAC;YAEF,IAAI,CAAC,WAAW,GAAG,UAAU,WAAgB;gBACzC,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE;oBAClB,WAAW,CAAC,GAAG,GAAG,EAAE,CAAC;iBACxB;gBACD,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;YAC7C,CAAC,CAAA;QACL,CAAC;QAtBe,eAAG,MAsBlB,CAAA;QAED,SAAgB,GAAG,CAAC,KAAa;YAC7B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YAEpB,IAAI,CAAC,IAAI,GAAG;gBACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACrB,CAAC,CAAC;YAEF,IAAI,CAAC,UAAU,GAAG,UAAU,IAAS;gBACjC,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC5B,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;oBAC1C,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC;iBAChC;YACL,CAAC,CAAC;YAEF,IAAI,CAAC,WAAW,GAAG,UAAU,WAAgB;gBACzC,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE;oBAClB,WAAW,CAAC,GAAG,GAAG,EAAE,CAAC;iBACxB;gBACD,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;YAC7C,CAAC,CAAA;QACL,CAAC;QApBe,eAAG,MAoBlB,CAAA;IACL,CAAC,EApIe,WAAW,GAAX,iBAAW,KAAX,iBAAW,QAoI1B;AAAD,CAAC,EApIS,KAAK,KAAL,KAAK,QAoId;ACrID,IAAU,KAAK,CA8tCd;AA9tCD,WAAU,KAAK;IAsBX;QACI,oBAAY,OAA0B;YAClC,IAAI,IAAI,GAAG,IAAI,CAAC;YAEhB,IAAI,QAAQ,GAAG;gBACX,yBAAyB,EAAO,IAAI;gBACpC,aAAa,EAAE,KAAK;aACvB,CAAA;YAED,IAAI,UAAkB,CAAC;YACvB,IAAI,KAAK,GAAU,EAAE,CAAC;YACtB,IAAI,IAAI,GAAU,EAAE,CAAC;YACrB,IAAI,OAAO,GAAG,EAAE,CAAC;YACjB,IAAI,QAAQ,GAAQ,IAAI,CAAC;YACzB,IAAI,MAAM,GAAQ,IAAI,CAAC;YACvB,IAAI,OAAO,GAAQ,IAAI,CAAC;YACxB,IAAI,OAAO,GAAG,CAAC,CAAC;YAEhB,IAAI,OAAO,GAAG,IAAI,CAAC;YACnB,IAAI,aAAqB,CAAC;YAC1B,IAAI,YAAiB,CAAC;YACtB,IAAI,YAAY,GAAQ,EAAE,CAAC;YAC3B,IAAI,gBAAgB,GAAQ,EAAE,CAAC;YAC/B,IAAI,UAAe,CAAC;YACpB,IAAI,aAAa,GAAQ,EAAE,CAAC;YAC5B,IAAI,cAAmB,CAAC;YACxB,IAAI,yBAA8B,CAAC;YACnC,IAAI,WAAW,GAAU,EAAE,CAAC;YAE5B,IAAI,oBAAoB,GAAG;gBACvB,MAAM,EAAO,IAAI;gBACjB,SAAS,EAAO,IAAI;gBACpB,QAAQ,EAAE,UAAU,CAAM,EAAE,CAAM;oBAC9B,OAAO,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC7B,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAC/B,CAAC;gBACN,CAAC;gBACD,gBAAgB,EAAS,EAAE;gBAC3B,cAAc,EAAE,KAAK;gBACrB,kBAAkB,EAAE,KAAK;gBACzB,oBAAoB,EAAE,KAAK;gBAC3B,SAAS,EAAE,KAAK;gBAChB,gBAAgB,EAAE,IAAI;gBACtB,qBAAqB,EAAE,KAAK;aAC/B,CAAC;YACF,IAAI,cAAc,GAAQ,EAAE,CAAC;YAC7B,IAAI,aAAa,GAAU,EAAE,CAAC;YAC9B,IAAI,MAAM,GAAU,EAAE,CAAC;YACvB,IAAI,oBAAoB,GAAU,EAAE,CAAC;YACrC,IAAI,iBAAiB,GAAG,KAAK,CAAC;YAE9B,IAAI,IAAI,GAAG,CAAC,CAAC;YACb,IAAI,SAAS,GAAG,CAAC,CAAC;YAElB,IAAI,iBAAiB,GAAG,IAAI,MAAA,KAAK,EAAE,CAAC;YACpC,IAAI,aAAa,GAAG,IAAI,MAAA,KAAK,EAAE,CAAC;YAChC,IAAI,mBAAmB,GAAG,IAAI,MAAA,KAAK,EAAE,CAAC;YAEtC,IAAI,OAAO,GAAQ,KAAK,CAAC;YACzB,IAAI,YAAY,GAAW,IAAI,CAAC;YAChC,IAAI,aAAa,GAAG,CAAC,CAAC;YACtB,IAAI,aAAa,GAAG,CAAC,CAAC;YACtB,IAAI,WAAmB,CAAC;YACxB,IAAI,QAAgB,CAAC;YACrB,IAAI,UAAU,GAAW,IAAI,CAAC;YAC9B,IAAI,aAAa,GAAG,IAAI,MAAA,KAAK,EAAE,CAAC;YAChC,IAAI,aAAa,GAAG,IAAI,MAAA,KAAK,EAAE,CAAC;YAChC,IAAI,YAAY,GAAG,IAAI,MAAA,KAAK,EAAE,CAAC;YAC/B,IAAI,WAAW,GAAG,IAAI,MAAA,KAAK,EAAE,CAAC;YAC9B,IAAI,IAAU,CAAC;YAEf,SAAS,WAAW;gBAChB,OAAO,EAAE,CAAC;YACd,CAAC;YAED,SAAS,SAAS;gBACd,OAAO,EAAE,CAAC;gBACV,IAAI,OAAO,IAAI,CAAC;oBACZ,OAAO,EAAE,CAAC;YAClB,CAAC;YAED,SAAS,eAAe,CAAC,KAAU;gBAC/B,YAAY,GAAG,KAAK,CAAC;YACzB,CAAC;YAED,SAAS,aAAa,CAAC,IAAS;gBAC5B,UAAU,GAAG,IAAI,CAAC;YACtB,CAAC;YAED,SAAS,aAAa,CAAC,aAAsB;gBACzC,aAAa,GAAG,aAAa,IAAI,CAAC,CAAC;gBACnC,IAAI,EAAO,CAAC;gBACZ,KAAK,IAAI,CAAC,GAAG,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACtD,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;oBAC1B,IAAI,EAAE,KAAK,SAAS,EAAE;wBAClB,IAAI,GAAG,GAAG,6CAA6C;4BACnD,UAAU,GAAG,+BAA+B,GAAG,CAAC,GAAG,IAAI;4BACvD,yBAAyB,CAAC;wBAE9B,GAAG,IAAU,CAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;wBACjC,MAAM,GAAG,CAAC;qBACb;oBACD,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;iBACnB;YACL,CAAC;YAED,SAAS,kBAAkB;gBACvB,IAAI,EAAO,CAAC;gBACZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC1C,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;oBAC1B,IAAI,EAAE,KAAK,SAAS,IAAI,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE;wBACvC,IAAI,GAAG,GAAG,6CAA6C;4BACnD,UAAU,GAAG,+BAA+B,GAAG,CAAC,GAAG,IAAI,CAAC;wBAE5D,IAAI,EAAE,IAAI,SAAS;4BACf,GAAG,IAAI,yBAAyB,CAAC;;4BAEjC,GAAG,IAAI,+BAA+B,GAAG,EAAE,GAAG,KAAK,CAAC;wBAExD,GAAG,IAAU,CAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;wBACjC,MAAM,GAAG,CAAC;qBACb;iBACJ;YACL,CAAC;YAED,SAAS,QAAQ;gBACb,OAAO,KAAK,CAAC;YACjB,CAAC;YAED,SAAS,QAAQ,CAAC,IAAW;gBACzB,KAAK,GAAG,aAAa,GAAG,IAAI,CAAC;gBAC7B,OAAO,GAAG,EAAE,CAAC;gBACb,QAAQ,GAAG,IAAI,CAAC;gBAChB,cAAc,CAAC,MAAM,GAAG,EAAE,CAAC;gBAC3B,aAAa,EAAE,CAAC;gBAChB,kBAAkB,EAAE,CAAC;gBAErB,IAAI,OAAO,EAAE;oBACT,MAAM,CAAC,KAAK,CAAC,CAAC;iBACjB;qBACI;oBACD,OAAO,EAAE,CAAC;iBACb;gBAED,aAAa,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YACzD,CAAC;YAED,SAAS,gBAAgB,CAAC,IAAS;gBAC/B,IAAI,SAAS,GAAG,KAAK,CAAC;gBAEtB,IAAI,IAAI,CAAC,WAAW,IAAI,SAAS;oBAC7B,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,EAAE;oBACtC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;oBACpC,SAAS,GAAG,IAAI,CAAC;iBACpB;gBAED,IAAI,IAAI,CAAC,IAAI,IAAI,SAAS,EAAE;oBACxB,IAAI,OAAe,CAAC;oBACpB,IAAI,CAAC,IAAI,CAAC,WAAW;wBACjB,OAAO,GAAG,CAAC,CAAC;yBACX,IAAI,UAAU,IAAI,IAAI;wBACvB,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;;wBAEpB,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;oBAEhF,IAAI,OAAO,GAAG,CAAC;wBACX,OAAO,GAAG,CAAC,CAAC;oBAEhB,IAAI,OAAO,IAAI,IAAI,EAAE;wBACjB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC;wBAC1B,SAAS,GAAG,IAAI,CAAC;qBACpB;iBACJ;gBAED,IAAI,SAAS;oBACT,QAAQ,EAAE,CAAC;YACnB,CAAC;YAED,SAAS,aAAa;gBAClB,OAAO;oBACH,WAAW,EAAE,IAAI,CAAC,WAAW;oBAC7B,IAAI,EAAE,IAAI;oBACV,UAAU,EAAE,UAAU;oBACtB,OAAO,EAAE,OAAO;oBAChB,KAAK,EAAE,YAAY;oBACnB,QAAQ,EAAE,IAAI;iBACjB,CAAC;YACN,CAAC;YAED,SAAS,IAAI,CAAC,QAAa,EAAE,SAAkB;gBAC3C,OAAO,GAAG,SAAS,CAAC;gBACpB,YAAY,GAAG,QAAQ,CAAC;gBACxB,aAAa,GAAG,IAAI,CAAC;gBACrB,IAAI,SAAS,KAAK,KAAK,EAAE;oBACrB,KAAK,CAAC,OAAO,EAAE,CAAC;iBACnB;gBACD,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACrB,IAAI,SAAS,KAAK,KAAK,EAAE;oBACrB,KAAK,CAAC,OAAO,EAAE,CAAC;iBACnB;gBACD,OAAO,GAAG,EAAE,CAAC;gBACb,aAAa,EAAE,CAAC;gBAChB,OAAO,EAAE,CAAC;YACd,CAAC;YAED;;;;eAIG;YACH,SAAS,QAAQ,CAAC,KAAU,EAAE,SAAkB;gBAC5C,OAAO,GAAG,SAAS,CAAC;gBACpB,aAAa,GAAG,KAAK,CAAC;gBACtB,YAAY,GAAG,IAAI,CAAC;gBACpB,IAAI,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;gBAC5C,MAAM,CAAC,SAAS,CAAC,QAAQ,GAAG,CAAC,OAAO,KAAK,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBAChE,OAAO,IAAI,CAAC,KAAK,CAAC,CAAA;gBACtB,CAAC,CAAC;gBACF,8DAA8D;gBAC9D,iFAAiF;gBACjF,IAAI,SAAS,KAAK,KAAK,EAAE;oBACrB,KAAK,CAAC,OAAO,EAAE,CAAC;iBACnB;gBACD,KAAK,CAAC,IAAI,EAAE,CAAC;gBACb,MAAM,CAAC,SAAS,CAAC,QAAQ,GAAG,WAAW,CAAC;gBACxC,IAAI,SAAS,KAAK,KAAK,EAAE;oBACrB,KAAK,CAAC,OAAO,EAAE,CAAC;iBACnB;gBACD,OAAO,GAAG,EAAE,CAAC;gBACb,aAAa,EAAE,CAAC;gBAChB,OAAO,EAAE,CAAC;YACd,CAAC;YAED,SAAS,MAAM;gBACX,IAAI,YAAY,EAAE;oBACd,IAAI,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;iBAC/B;qBAAM,IAAI,aAAa,EAAE;oBACtB,QAAQ,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;iBACpC;YACL,CAAC;YAED,SAAS,SAAS,CAAC,QAAa;gBAC5B,MAAM,GAAG,QAAQ,CAAC;gBAClB,IAAI,OAAO,CAAC,aAAa,EAAE;oBACvB,cAAc,GAAG,aAAa,EAAE,CAAC;oBACjC,yBAAyB,GAAG,wBAAwB,EAAE,CAAC;iBAC1D;gBACD,OAAO,EAAE,CAAC;YACd,CAAC;YAED,SAAS,WAAW;gBAChB,OAAO,aAAa,CAAC;YACzB,CAAC;YAED,SAAS,iBAAiB,CAAC,OAAY;gBACnC,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;gBACxB,cAAc,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,EAAE,CAAC;gBACvD,cAAc,CAAC,oBAAoB,GAAG,EAAE,CAAC;gBACzC,cAAc,CAAC,MAAM,GAAG,EAAE,CAAC;gBAC3B,IAAI,GAAG,GAAG,cAAc,CAAC,WAAW,CAAC,MAAM,CAAC;gBAC5C,OAAO,GAAG,EAAE,EAAE;oBACV,cAAc,CAAC,oBAAoB,CAAC,GAAG,CAAC,GAAG,sBAAsB,CAAC,cAAc,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;iBACtG;gBACD,WAAW,CAAC,aAAa,IAAI,EAAE,CAAC,CAAC;YACrC,CAAC;YAED,SAAS,cAAc;gBACnB,cAAc,CAAC,MAAM,GAAG,cAAc,CAAC,MAAM,IAAI,EAAE,CAAC;gBAEpD,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,WAAW,EAAE;oBACpC,cAAc,CAAC,WAAW,GAAG,cAAc,CAAC,WAAW,IAAI,EAAE,CAAC;oBAC9D,cAAc,CAAC,oBAAoB,GAAG,cAAc,CAAC,oBAAoB,IAAI,EAAE,CAAC;oBAChF,IAAI,GAAQ,EAAE,GAAG,GAAG,cAAc,CAAC,WAAW,CAAC,MAAM,CAAC;oBAEtD,OAAO,GAAG,EAAE,EAAE;wBACV,GAAG,GAAG,cAAc,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;wBACtC,GAAG,CAAC,IAAI,EAAE,CAAC;wBACX,cAAc,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;wBAC1D,GAAG,CAAC,WAAW,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;qBAC1C;oBACD,cAAc,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC;iBAC5C;gBAED,OAAO,cAAc,CAAC,MAAM,CAAC;YACjC,CAAC;YAED,SAAS,WAAW,CAAC,YAAiB;gBAClC,IAAI,CAAC,OAAO,CAAC,yBAAyB,EAAE;oBACpC,OAAO,CAAC,yBAAyB,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,yBAAyB,EAAE,CAAC;iBAClF;gBAED,MAAM,GAAG,EAAE,CAAC;gBACZ,oBAAoB,GAAG,EAAE,CAAC;gBAC1B,YAAY,GAAG,YAAY,IAAI,EAAE,CAAC;gBAClC,aAAa,GAAG,CAAC,YAAY,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;gBAEhF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC3C,IAAI,EAAE,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAM,EAAE,EAAE,oBAAoB,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC7G,EAAE,CAAC,WAAW,GAAG,EAAE,CAAC,WAAW,IAAI,cAAc,CAAC,WAAW,IAAI,EAAE,CAAC;oBACpE,EAAE,CAAC,WAAW,GAAG,OAAO,EAAE,CAAC,MAAM,KAAK,UAAU,CAAC;oBAEjD,gCAAgC;oBAChC,EAAE,CAAC,oBAAoB,GAAG,EAAE,CAAC;oBAC7B,IAAI,GAAG,GAAG,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC;oBAChC,OAAO,GAAG,EAAE,EAAE;wBACV,EAAE,CAAC,oBAAoB,CAAC,GAAG,CAAC,GAAG,sBAAsB,CAAC,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;qBAC9E;oBAED,oBAAoB,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;iBAChC;gBAED,OAAO,EAAE,CAAC;YACd,CAAC;YAED,SAAS,YAAY,CAAC,CAAS;gBAC3B,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;YACpB,CAAC;YAED,SAAS,UAAU,CAAC,EAAO;gBACvB,OAAO,OAAO,CAAC,EAAE,CAAC,CAAC;YACvB,CAAC;YAED,SAAS,mBAAmB;gBACxB,IAAI,CAAC,QAAQ,EAAE;oBACX,QAAQ,GAAG,EAAE,CAAC;oBACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;wBACzC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC;qBACrC;iBACJ;YACL,CAAC;YAED,SAAS,UAAU,CAAC,EAAO;gBACvB,mBAAmB,EAAE,CAAC;gBACtB,OAAO,QAAQ,CAAC,EAAE,CAAC,CAAC;YACxB,CAAC;YAED,SAAS,WAAW,CAAC,EAAO;gBACxB,OAAO,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;YAC9B,CAAC;YAED,SAAS,YAAY,CAAC,OAAc;gBAChC,IAAI,IAAI,GAAU,EAAE,CAAC;gBACrB,mBAAmB,EAAE,CAAC;gBACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC5C,IAAI,GAAG,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC/B,IAAI,GAAG,IAAI,IAAI,EAAE;wBACb,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC;qBAC3B;iBACJ;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,SAAS,YAAY,CAAC,QAAe;gBACjC,IAAI,GAAG,GAAU,EAAE,CAAC;gBACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC7C,IAAI,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE;wBAC3B,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;qBACnD;iBACJ;gBACD,OAAO,GAAG,CAAC;YACf,CAAC;YAED,SAAS,UAAU,CAAC,EAAO,EAAE,IAAS;gBAClC,IAAI,OAAO,CAAC,EAAE,CAAC,KAAK,SAAS,IAAI,EAAE,KAAK,IAAI,CAAC,UAAU,CAAC,EAAE;oBACtD,MAAM,4BAA4B,CAAC;iBACtC;gBACD,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC;gBAC1B,IAAI,CAAC,OAAO,EAAE;oBACV,OAAO,GAAG,EAAE,CAAC;iBAChB;gBACD,OAAO,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;gBACnB,OAAO,EAAE,CAAC;YACd,CAAC;YAED,SAAS,UAAU,CAAC,YAAoB,EAAE,IAAS;gBAC/C,KAAK,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;gBACpC,aAAa,CAAC,YAAY,CAAC,CAAC;gBAC5B,OAAO,EAAE,CAAC;YACd,CAAC;YAED,SAAS,OAAO,CAAC,IAAS;gBACtB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACjB,aAAa,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAChC,OAAO,EAAE,CAAC;YACd,CAAC;YAED,SAAS,UAAU,CAAC,EAAO;gBACvB,IAAI,GAAG,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;gBACtB,IAAI,GAAG,KAAK,SAAS,EAAE;oBACnB,MAAM,YAAY,CAAC;iBACtB;gBACD,OAAO,OAAO,CAAC,EAAE,CAAC,CAAC;gBACnB,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBACrB,aAAa,CAAC,GAAG,CAAC,CAAC;gBACnB,OAAO,EAAE,CAAC;YACd,CAAC;YAED,SAAS,OAAO;gBACZ,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,SAAS,SAAS;gBACd,OAAO,IAAI,CAAC,MAAM,CAAC;YACvB,CAAC;YAED,SAAS,OAAO,CAAC,CAAS;gBACtB,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBAEnB,+EAA+E;gBAC/E,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;oBACjE,IAAI,EAAE,GAAG,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACnC,IAAI,CAAC,EAAE,CAAC,gBAAgB,EAAE;wBACtB,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;wBAC7B,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;qBAC/D;iBACJ;gBACD,qDAAqD;qBAChD,IAAI,IAAI,IAAI,IAAI,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;oBACtD,eAAe,CAAC,IAAI,CAAC,CAAC;iBACzB;gBAED,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,SAAS,eAAe,CAAC,CAAS;gBAC9B,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACnB,IAAI,IAAI,KAAK,SAAS,EAAE;oBACpB,OAAO,IAAI,CAAC;iBACf;gBAED,8BAA8B;gBAC9B,IAAI,IAAI,CAAC,OAAO,EAAE;oBACd,OAAO,OAAO,CAAC,yBAAyB,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;iBACtE;gBAED,4BAA4B;gBAC5B,IAAI,IAAI,CAAC,aAAa,EAAE;oBACpB,OAAO,OAAO,CAAC,yBAAyB,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;iBACvE;gBAED,OAAO,CAAC,OAAO,CAAC,eAAe,IAAI,OAAO,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;YACjF,CAAC;YAED,SAAS,uBAAuB,CAAC,KAAa,EAAE,QAAiB;gBAC7D,IAAI,KAAK,IAAI,IAAI,EAAE;oBACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBAC3C,oBAAoB,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;wBAC7B,aAAa,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,QAAQ,CAAC;qBACzC;iBACJ;qBAAM;oBACH,oBAAoB,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;oBACjC,aAAa,CAAC,KAAK,CAAC,CAAC,SAAS,GAAG,QAAQ,CAAC;iBAC7C;gBACD,OAAO,EAAE,CAAC;YACd,CAAC;YAED;;eAEG;YACH,SAAS,iBAAiB,CAAC,KAAa;gBACpC,uBAAuB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACzC,CAAC;YAED;;eAEG;YACH,SAAS,eAAe,CAAC,KAAa;gBAClC,uBAAuB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC1C,CAAC;YAED,SAAS,0BAA0B,CAAC,IAAS;gBACzC,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACnB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,EAAE;oBAC7D,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;iBACjF;qBAAM;oBACH,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC;iBAChF;YACL,CAAC;YAED,SAAS,mBAAmB,CAAC,IAAS,EAAE,QAAa;gBACjD,IAAI,IAAI,GAAG,0BAA0B,CAAC,IAAI,CAAC,CAAC;gBAC5C,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,GAAG,QAAQ,CAAC;gBACpG,OAAO,EAAE,CAAC;YACd,CAAC;YAED;;;;;eAKG;YACH,SAAS,aAAa,CAAC,OAAc;gBACjC,IAAI,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACjD,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACpC,CAAC;YAED;;;;;eAKG;YACH,SAAS,WAAW,CAAC,OAAc;gBAC/B,IAAI,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACjD,mBAAmB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACrC,CAAC;YAED,SAAS,SAAS;gBACd,OAAO,MAAM,CAAC;YAClB,CAAC;YAED,SAAS,gBAAgB,CAAC,WAAgB,EAAE,GAAQ,EAAE,KAAa,EAAE,WAAgB,EAAE,MAAa;gBAChG,IAAI,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;gBAE7B,IAAI,CAAC,KAAK,EAAE;oBACR,KAAK,GAAG,IAAI,KAAK,CAAC,KAAK,EAAO,CAAC;oBAC/B,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC;oBAClB,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;oBACpB,KAAK,CAAC,WAAW,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,WAAW,GAAG,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;oBAC3F,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;oBAC9B,WAAW,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;iBAC5B;gBAED,OAAO,KAAK,CAAC;YACjB,CAAC;YAED,SAAS,aAAa,CAAC,IAAW,EAAE,WAAiB;gBACjD,IAAI,KAAU,CAAC;gBACf,IAAI,GAAQ,CAAC;gBACb,IAAI,MAAM,GAAU,EAAE,CAAC;gBACvB,IAAI,WAAW,GAAG,EAAE,CAAC;gBACrB,IAAI,CAAM,CAAC;gBACX,IAAI,KAAK,GAAG,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpD,IAAI,EAAE,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;gBAE9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAW,EAAE,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAChE,GAAG,GAAG,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;oBAC7B,KAAK,GAAG,gBAAgB,CAAC,WAAW,EAAE,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;iBAC1E;gBAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBACzC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;oBACZ,GAAG,GAAG,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;oBACnD,KAAK,GAAG,gBAAgB,CAAC,WAAW,EAAE,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;oBAEvE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;iBACjC;gBAED,IAAI,KAAK,GAAG,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;oBAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACpC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;wBAClB,KAAK,CAAC,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;qBACnD;iBACJ;gBAED,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC;gBAE3C,OAAO,MAAM,CAAC;YAClB,CAAC;YAED,SAAS,eAAe,CAAC,MAAW;gBAChC,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;gBACzB,IAAI,EAAE,GAAG,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACpC,IAAI,WAAW,GAAG,CAAC,KAAK,CAAC,KAAK,IAAI,aAAa,CAAC,MAAM,CAAC,CAAC;gBACxD,IAAI,GAAQ,EAAE,GAAG,GAAG,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC;gBAE1C,IAAI,CAAC,WAAW,IAAI,EAAE,CAAC,oBAAoB,EAAE;oBACzC,6CAA6C;oBAC7C,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC;oBAC5B,OAAO,CAAC,EAAE,EAAE;wBACR,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,EAAE;4BACrC,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;yBAC3C;qBACJ;iBACJ;gBAED,OAAO,GAAG,EAAE,EAAE;oBACV,GAAG,GAAG,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;oBAC1B,GAAG,CAAC,IAAI,EAAE,CAAC;oBACX,IAAI,CAAC,WAAW,IAAI,EAAE,CAAC,oBAAoB,EAAE;wBACzC,EAAE,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;qBACxD;yBAAM;wBACH,EAAE,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;qBACtD;oBACD,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;iBAC3B;gBACD,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC;YAC9B,CAAC;YAED,SAAS,cAAc,CAAC,KAAU;gBAC9B,IAAI,EAAE,GAAG,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACpC,IAAI,MAAM,GAAG,IAAI,KAAK,CAAC,WAAW,EAAW,CAAC;gBAC9C,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;gBACrB,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;gBACtB,IAAI,CAAC,EAAE,CAAC,qBAAqB,EAAE;oBAC3B,eAAe,CAAC,MAAM,CAAC,CAAC;iBAC3B;YACL,CAAC;YAED,SAAS,SAAS,CAAC,MAAa,EAAE,KAAc;gBAC5C,KAAK,GAAG,KAAK,IAAI,CAAC,CAAC;gBACnB,IAAI,EAAE,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;gBAC9B,IAAI,cAAc,GAAG,EAAE,CAAC,SAAS,CAAC;gBAClC,IAAI,aAAa,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;gBAChD,IAAI,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAM,CAAC;gBAChC,OAAO,GAAG,EAAE,EAAE;oBACV,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;oBAEhB,IAAI,CAAC,CAAC,SAAS,IAAI,CAAC,EAAE,CAAC,kBAAkB,EAAE;wBACvC,SAAS;qBACZ;oBAED,4FAA4F;oBAC5F,IAAI,CAAC,CAAC,MAAM,EAAE;wBACV,SAAS,CAAC,CAAC,CAAC,MAAM,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;qBAClC;oBAED,IAAI,EAAE,CAAC,WAAW,CAAC,MAAM,IAAI,CACzB,EAAE,CAAC,cAAc,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE;wBACtE,cAAc,CAAC,CAAC,CAAC,CAAC;qBACrB;oBAED,CAAC,CAAC,SAAS,GAAG,cAAc,GAAG,aAAa,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;oBAC5D,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;iBACtD;YACL,CAAC;YAED,SAAS,kBAAkB,CAAC,MAAa,EAAE,KAAc;gBACrD,KAAK,GAAG,KAAK,IAAI,CAAC,CAAC;gBACnB,IAAI,EAAE,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;gBAC9B,IAAI,WAAW,GAAU,EAAE,EAAE,IAAW,EAAE,EAAE,GAAG,CAAC,EAAE,CAAM,CAAC;gBACzD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC3C,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;oBACd,WAAW,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;oBAEtB,IAAI,CAAC,CAAC,CAAC,SAAS,EAAE;wBACd,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,MAAM,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;wBACnE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;4BAC3C,WAAW,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;yBAC/B;qBACJ;oBAED,IAAI,CAAC,CAAC,MAAM,IAAI,EAAE,CAAC,gBAAgB,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,IAAI,EAAE,CAAC,kBAAkB,CAAC,EAAE;wBAC5E,WAAW,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;qBAChC;iBACJ;gBACD,OAAO,WAAW,CAAC;YACvB,CAAC;YAED,SAAS,eAAe,CAAC,EAAO;gBAC5B,IAAI,OAAO,GAAG,0CAA0C,CAAC;gBACzD,IAAI,OAAO,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBAC3C,OAAO;oBACH,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC;oBAC7B,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;iBACnB,CAAC;YACN,CAAC;YAED,SAAS,sBAAsB,CAAC,UAAe;gBAC3C,IAAI,eAAe,GAAG,eAAe,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;gBAC7D,IAAI,EAAE,GAAQ,IAAI,QAAQ,CACtB,QAAQ,EACR,WAAW,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,4CAA4C;oBACtF,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,iBAAiB;oBAC7C,eAAe,CAAC,IAAI;oBACpB,GAAG,CACN,CAAC;gBACF,EAAE,CAAC,WAAW,GAAG,EAAE,CAAC,IAAI,GAAG,yBAAyB,CAAC;gBACrD,OAAO,EAAE,CAAC;YACd,CAAC;YAED,SAAS,aAAa;gBAClB,IAAI,UAAU,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;gBAEzC,IAAI,UAAU,GAAG,UAAU,CAAC,IAAI;qBAC3B,OAAO,CAAC,2BAA2B,EAAE,2BAA2B,CAAC;qBACjE,OAAO,CAAC,0BAA0B,EAAE,qDAAqD,CAAC;qBAC1F,OAAO,CAAC,+BAA+B,EACxC,kEAAkE,CAAC,CAAC;gBAExE,kEAAkE;gBAClE,qDAAqD;gBACrD,IAAI,GAAG,GAAG;oBACN,+BAA+B;oBAC/B,8BAA8B;oBAC9B,8BAA8B;oBAC9B,aAAa;oBACb,0DAA0D;oBAC1D,uBAAuB;oBACvB,YAAY;oBACZ,IAAI;oBACJ,kBAAkB;oBAClB,KAAK;iBACR,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACX,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;gBAC9C,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,YAAY,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;gBACtD,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,YAAY,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEtD,IAAI,EAAE,GAAQ,IAAI,QAAQ,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;gBAChD,EAAE,CAAC,WAAW,GAAG,EAAE,CAAC,IAAI,GAAG,gBAAgB,CAAC;gBAC5C,OAAO,EAAE,CAAC;YACd,CAAC;YAED,SAAS,wBAAwB;gBAC7B,IAAI,UAAU,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;gBAEzC,IAAI,UAAU,GAAG,UAAU,CAAC,IAAI;qBAC3B,OAAO,CAAC,2BAA2B,EAAE,2BAA2B,CAAC;qBACjE,OAAO,CAAC,0BAA0B,EAAE,uEAAuE,CAAC;qBAC5G,OAAO,CAAC,+BAA+B,EACxC,iFAAiF,CAAC,CAAC;gBAEvF,kEAAkE;gBAClE,qDAAqD;gBACrD,IAAI,GAAG,GAAG;oBACN,uCAAuC;oBACvC,8BAA8B;oBAC9B,8BAA8B;oBAC9B,aAAa;oBACb,0DAA0D;oBAC1D,uBAAuB;oBACvB,oBAAoB;oBACpB,4BAA4B;oBAC5B,sBAAsB;oBACtB,IAAI;oBACJ,YAAY;oBACZ,IAAI;oBACJ,kBAAkB;oBAClB,KAAK;iBACR,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACX,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;gBAC9C,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,YAAY,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;gBACtD,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,YAAY,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEtD,IAAI,EAAE,GAAQ,IAAI,QAAQ,CAAC,qBAAqB,EAAE,GAAG,CAAC,CAAC;gBACvD,EAAE,CAAC,WAAW,GAAG,EAAE,CAAC,IAAI,GAAG,2BAA2B,CAAC;gBACvD,OAAO,EAAE,CAAC;YACd,CAAC;YAED,SAAS,gBAAgB,CAAC,KAAY,EAAE,IAAS;gBAC7C,IAAI,MAAM,GAAU,EAAE,EAAE,GAAG,GAAG,CAAC,CAAC;gBAEhC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;oBAC5C,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE;wBACxB,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;qBAC5B;iBACJ;gBAED,OAAO,MAAM,CAAC;YAClB,CAAC;YAED,SAAS,2BAA2B,CAAC,KAAY,EAAE,IAAS,EAAE,KAAU;gBACpE,IAAI,MAAM,GAAU,EAAE,EAAE,GAAG,GAAG,CAAC,EAAE,IAAS,CAAC;gBAE3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;oBAC5C,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBAChB,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;wBACV,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC;qBACxB;yBAAM,IAAI,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE;wBAC3B,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC;wBACrB,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;qBACnB;iBACJ;gBAED,OAAO,MAAM,CAAC;YAClB,CAAC;YAED,SAAS,wBAAwB,CAAC,KAAY;gBAC1C,IAAI,MAAM,EAAE;oBACR,IAAI,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,gBAAgB,CAAC;oBAC5E,IAAI,sBAAsB,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC,2BAA2B,CAAC;oBAE7G,IAAI,YAAY,CAAC,iBAAiB,EAAE;wBAChC,aAAa,GAAG,WAAW,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;qBAC1D;yBAAM,IAAI,YAAY,CAAC,iBAAiB,EAAE;wBACvC,aAAa,GAAG,sBAAsB,CAAC,KAAK,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC;qBAC1E;yBAAM,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE;wBACxC,aAAa,GAAG,WAAW,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;qBAClD;iBACJ;qBAAM;oBACH,gEAAgE;oBAChE,iEAAiE;oBACjE,gBAAgB;oBAChB,aAAa,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;iBAClC;gBAED,uBAAuB;gBACvB,OAAO,EAAE,SAAS,EAAE,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC;YACpE,CAAC;YAED,SAAS,WAAW,CAAC,IAAW,EAAE,OAAc;gBAC5C,IAAI,IAAS,EAAE,CAAM,EAAE,eAAwB,EAAE,IAAI,GAAU,EAAE,CAAC;gBAClE,IAAI,IAAI,GAAG,CAAC,EAAE,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC;gBAElC,IAAI,YAAY,IAAI,YAAY,CAAC,iBAAiB,EAAE;oBAChD,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EACb,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC,iBAAiB,CAAC,CAAC,CAAC;iBACjE;gBAED,IAAI,YAAY,IAAI,YAAY,CAAC,gBAAgB,EAAE;oBAC/C,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EACxB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,gBAAgB,CAAC,CAAC,CAAC;iBACnD;gBAED,KAAK,IAAI,CAAC,GAAG,IAAI,EAAE,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;oBAC9C,IAAI,CAAC,IAAI,EAAE,EAAE;wBACT,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACzB;yBAAM;wBACH,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;wBAClB,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;wBAEZ,IAAI,CAAC,aAAa,CAAC,MAAM,IAAI,CAAC,eAAe,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;4BACpF,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC,OAAO;4BAC1B,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;+BAC7B,CAAC,eAAe;gCACf,8DAA8D;gCAC9D,6CAA6C;gCAC7C,kEAAkE;gCAClE,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC,aAAa,CAAC,CAAC;+BACzC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC;+BACjC,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAC3C;4BACE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;yBACzB;qBACJ;iBACJ;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,SAAS,MAAM,CAAC,MAAa;gBACzB,QAAQ,GAAG,IAAI,CAAC;gBAEhB,IAAI,YAAY,CAAC,iBAAiB,IAAI,gBAAgB,CAAC,iBAAiB;oBACpE,YAAY,CAAC,iBAAiB,IAAI,gBAAgB,CAAC,iBAAiB,EAAE;oBACtE,WAAW,GAAG,EAAE,CAAC;iBACpB;gBAED,IAAI,aAAa,GAAG,wBAAwB,CAAC,MAAM,CAAC,CAAC;gBACrD,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC;gBACpC,IAAI,OAAO,GAAG,aAAa,CAAC,IAAI,CAAC;gBAEjC,cAAc,CAAC,MAAM,GAAG,EAAE,CAAC;gBAE3B,MAAM,GAAG,EAAE,CAAC;gBACZ,IAAI,aAAa,CAAC,MAAM,EAAE;oBACtB,MAAM,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC;oBAChC,IAAI,MAAM,CAAC,MAAM,EAAE;wBACf,SAAS,CAAC,MAAM,CAAC,CAAC;wBAClB,OAAO,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC;qBACxC;iBACJ;gBAED,IAAI,IAAI,GAAG,WAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAEtC,IAAI,GAAG,OAAO,CAAC;gBAEf,OAAO,IAAI,CAAC;YAChB,CAAC;YAED,SAAS,OAAO;gBACZ,IAAI,OAAO,EAAE;oBACT,OAAO;iBACV;gBAED,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC9B,IAAI,eAAe,GAAG,SAAS,CAAC;gBAEhC,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,gDAAgD;gBAE1E,OAAO,GAAG,IAAI,CAAC;gBACf,gBAAgB,GAAG,YAAY,CAAC;gBAChC,YAAY,GAAG,EAAE,CAAC;gBAElB,IAAI,eAAe,KAAK,SAAS,EAAE;oBAC/B,mBAAmB,CAAC,MAAM,CAAC,aAAa,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;iBAC3D;gBACD,IAAI,WAAW,KAAK,IAAI,CAAC,MAAM,EAAE;oBAC7B,iBAAiB,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;iBACzG;gBACD,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;oBACjB,aAAa,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;iBACpE;YACL,CAAC;YAED;;;;;;;;;;;;;;;;;;eAkBG;YACH,SAAS,iBAAiB,CAAC,IAAS,EAAE,cAAuB,EAAE,+BAAwC;gBACnG,IAAI,IAAI,GAAG,IAAI,CAAC;gBAChB,IAAI,SAAc,CAAC;gBACnB,IAAI,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;gBAC/D,IAAI,uBAAuB,GAAG,IAAI,KAAK,CAAC,KAAK,EAAE,CAAC;gBAEhD,SAAS,iBAAiB,CAAC,MAAa;oBACpC,IAAI,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;wBAC9C,OAAO;qBACV;oBAED,cAAc,GAAG,MAAM,CAAC;oBAExB,uBAAuB,CAAC,MAAM,CAAC;wBAC3B,MAAM,EAAE,IAAI;wBACZ,KAAK,EAAE,cAAc;wBACrB,UAAU,EAAE,IAAI;qBACnB,EAAE,IAAI,KAAK,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC;gBACpC,CAAC;gBAED,SAAS,MAAM;oBACX,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;wBAC3B,SAAS,GAAG,IAAI,CAAC;wBACjB,IAAI,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;wBACrD,IAAI,CAAC,cAAc,EAAE;4BACjB,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC;yBACtD;wBACD,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;wBACnC,SAAS,GAAG,KAAK,CAAC;qBACrB;gBACL,CAAC;gBAED,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,UAAU,CAAM,EAAE,IAAS;oBAC5D,IAAI,SAAS,EAAE;wBAAE,OAAO;qBAAE;oBAC1B,IAAI,iBAAiB,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;oBAClE,IAAI,CAAC,+BAA+B,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,WAAW,EAAE;wBACpE,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;qBACxC;yBAAM;wBACH,gCAAgC;wBAChC,IAAI,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,UAAU,EAAE,IAAI,OAAO,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;wBACnG,8BAA8B;wBAC9B,iBAAiB,CAAC,QAAQ,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC;qBACzD;gBACL,CAAC,CAAC,CAAC;gBAEH,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;gBACrC,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;gBAEzC,OAAO,uBAAuB,CAAC;YACnC,CAAC;YAED,SAAS,qBAAqB,CAAC,IAAgB,EAAE,GAAW;gBACxD,IAAI,QAAa,CAAC;gBAClB,IAAI,SAAc,CAAC;gBAEnB,uEAAuE;gBACvE,mCAAmC;gBACnC,kBAAkB,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC;gBAE/C,SAAS,kBAAkB,CAAC,IAAS;oBACjC,QAAQ,GAAG,EAAE,CAAC;oBACd,KAAK,IAAI,GAAG,IAAI,IAAI,EAAE;wBAClB,IAAI,EAAE,GAAQ,IAAI,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC;wBACpC,QAAQ,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;qBAC5B;gBACL,CAAC;gBAED,SAAS,MAAM;oBACX,IAAI,QAAQ,EAAE;wBACV,SAAS,GAAG,IAAI,CAAC;wBACjB,mBAAmB,EAAE,CAAC;wBACtB,IAAI,OAAO,GAAG,EAAE,CAAC;wBACjB,KAAK,IAAI,EAAE,IAAI,QAAQ,EAAE;4BACrB,IAAI,GAAG,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;4BACvB,IAAI,GAAG,IAAI,SAAS,EAAE;gCAClB,OAAO,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;6BAC/B;yBACJ;wBACD,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;wBACpC,SAAS,GAAG,KAAK,CAAC;qBACrB;gBACL,CAAC;gBAED,IAAI,CAAC,sBAAsB,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,IAAI;oBACnD,IAAI,SAAS,EAAE;wBAAE,OAAO;qBAAE;oBAC1B,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG,EAAE;wBAAE,OAAO;qBAAE;oBAChC,IAAI,IAAI,CAAC,IAAI,EAAE;wBACX,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBACjC;gBACL,CAAC,CAAC,CAAC;gBAEH,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;gBACrC,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAC7C,CAAC;YAED,SAAS,OAAO,CAAC,IAAS;gBAEtB,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI;oBAC1B,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC;gBAElD,YAAY,GAAG,IAAI,CAAC;gBACpB,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;gBAC3B,OAAO,GAAG,KAAK,CAAC;gBAEhB,IAAI,CAAC,IAAI,EAAE;oBACP,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAC7B,mBAAmB,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC;oBAC5C,OAAO,KAAK,CAAC;iBAChB;gBAED,IAAI,OAAO,GAAG,IAAI,CAAC;gBACnB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;gBACvC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC;gBAEpC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;oBAC/C,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;;oBAEd,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;gBAE3E,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACjB,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;gBAE7B,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAExB,mBAAmB,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC;YAChD,CAAC;YAED,SAAS,QAAQ;gBACb,IAAI,aAAa,GAAG,CAAC,EAAE;oBACnB,aAAa,EAAE,CAAC;oBAChB,OAAO;iBACV;gBAED,aAAa,GAAG,CAAC,CAAC;gBAElB,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;gBAE3B,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACf,IAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;oBAC7B,IAAI,EAAE,KAAK,KAAK;wBACZ,OAAO,KAAK,CAAC;iBACpB;gBAED,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAE3B,IAAI,CAAC,IAAI,CAAC,GAAG;oBACT,OAAO,KAAK,CAAC;gBAEjB,oBAAoB;gBAEpB,IAAI,CAAC,IAAI,CAAC,UAAU;oBAChB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;gBAExB,IAAI,OAAO,GAAyB,EAAE,CAAC;gBAEvC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC;gBACpD,IAAI,IAAI;oBACJ,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;gBACxB,IAAI,IAAI,CAAC,WAAW;oBAChB,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC;gBAEpC,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;oBACnC,IAAI,OAAO,IAAI,CAAC,MAAM,KAAK,QAAQ;wBAC/B,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;yBAC1B;wBACD,OAAO,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;qBAChC;iBACJ;gBAED,IAAI,IAAI,CAAC,MAAM,EAAE;oBACb,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;iBAC5C;gBAED,IAAI,EAAE,GAAG,QAAQ,CAAC;gBAElB,IAAI,IAAI,GAAG,IAAI,CAAC;gBAChB,IAAI,WAAW,GAAG;oBACd,KAAK,EAAE,KAAK;oBACZ,IAAI,EAAE,IAAI,CAAC,MAAM;oBACjB,WAAW,EAAE,WAAW;oBACxB,GAAG,EAAE,IAAI,CAAC,GAAG;oBACb,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE,EAAE;oBACZ,OAAO,EAAE,UAAU,QAAkC;wBACjD,OAAO,GAAG,KAAK,CAAC;wBAChB,IAAI,QAAQ,CAAC,KAAK;4BACd,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;;4BAE7D,OAAO,CAAC,QAAQ,CAAC,CAAC;wBACtB,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBAC9B,CAAC;oBACD,KAAK,EAAE,UAAU,GAAQ,EAAE,MAAW,EAAE,EAAO;wBAC3C,OAAO,GAAG,KAAK,CAAC;wBAEhB,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE;4BAC9F,IAAI,IAAI,GAAG,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;4BACzC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;gCACpC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gCACrD,mBAAmB,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC;gCAC5C,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gCAC1B,OAAO;6BACV;yBACJ;wBAED,YAAY,GAAG,GAAG,CAAC,QAAQ,CAAC;wBAC5B,mBAAmB,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC;wBAC5C,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBAC9B,CAAC;oBACD,QAAQ,EAAE;wBACN,OAAO,GAAG,KAAK,CAAC;oBACpB,CAAC;iBACJ,CAAA;gBAED,IAAI,IAAI,CAAC,UAAU,EAAE;oBACjB,IAAI,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;oBAC5C,IAAI,EAAE,KAAK,KAAK,EAAE;wBACd,OAAO,GAAG,KAAK,CAAC;wBAChB,mBAAmB,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC;wBAC5C,OAAO,KAAK,CAAC;qBAChB;iBACJ;gBAED,WAAW,CAAC,IAAI,GAAS,CAAE,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBAErD,mBAAmB,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC;gBAC5C,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAClC,CAAC;YAED,SAAS,YAAY;gBACjB,IAAI,aAAa,IAAI,CAAC;oBAClB,aAAa,GAAG,CAAC,CAAC;gBACtB,aAAa,EAAE,CAAC;YACpB,CAAC;YAED,SAAS,cAAc;gBACnB,IAAI,aAAa,GAAG,CAAC,EAAE;oBACnB,aAAa,EAAE,CAAC;oBAChB,IAAI,aAAa,IAAI,CAAC,IAAI,aAAa,GAAG,CAAC;wBACvC,QAAQ,EAAE,CAAC;iBAClB;YACL,CAAC;YAED,IAAI,GAAG;gBACH,UAAU;gBACV,aAAa,EAAE,WAAW;gBAC1B,WAAW,EAAE,SAAS;gBACtB,kBAAkB,EAAE,gBAAgB;gBACpC,eAAe,EAAE,aAAa;gBAC9B,SAAS,EAAE,OAAO;gBAClB,UAAU,EAAE,QAAQ;gBACpB,UAAU,EAAE,QAAQ;gBACpB,WAAW,EAAE,SAAS;gBACtB,MAAM,EAAE,IAAI;gBACZ,UAAU,EAAE,QAAQ;gBACpB,QAAQ,EAAE,MAAM;gBAChB,mBAAmB,EAAE,iBAAiB;gBACtC,gBAAgB,EAAE,cAAc;gBAChC,aAAa,EAAE,WAAW;gBAC1B,aAAa,EAAE,WAAW;gBAC1B,mBAAmB,EAAE,iBAAiB;gBACtC,iBAAiB,EAAE,eAAe;gBAClC,eAAe,EAAE,aAAa;gBAC9B,aAAa,EAAE,WAAW;gBAC1B,WAAW,EAAE,SAAS;gBACtB,YAAY,EAAE,UAAU;gBACxB,YAAY,EAAE,UAAU;gBACxB,aAAa,EAAE,WAAW;gBAC1B,cAAc,EAAE,YAAY;gBAC5B,cAAc,EAAE,YAAY;gBAC5B,cAAc,EAAE,YAAY;gBAC5B,iBAAiB,EAAE,eAAe;gBAClC,eAAe,EAAE,aAAa;gBAC9B,SAAS,EAAE,OAAO;gBAClB,YAAY,EAAE,UAAU;gBACxB,YAAY,EAAE,UAAU;gBACxB,SAAS,EAAE,OAAO;gBAClB,YAAY,EAAE,UAAU;gBACxB,mBAAmB,EAAE,iBAAiB;gBACtC,uBAAuB,EAAE,qBAAqB;gBAE9C,WAAW,EAAE,SAAS;gBACtB,SAAS,EAAE,OAAO;gBAClB,iBAAiB,EAAE,eAAe;gBAElC,mBAAmB,EAAE,iBAAiB;gBACtC,eAAe,EAAE,aAAa;gBAC9B,qBAAqB,EAAE,mBAAmB;gBAE1C,SAAS,EAAE,OAAO;gBAClB,UAAU,EAAE,QAAQ;gBACpB,cAAc,EAAE,YAAY;gBAC5B,gBAAgB,EAAE,cAAc;gBAChC,eAAe,EAAE,aAAa;gBAC9B,cAAc,EAAE,YAAY;gBAC5B,eAAe,EAAE,aAAa;aAC1B,CAAC;YAET,UAAU,GAAG,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC;YACrC,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,kBAAkB,CAAC;YACxD,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,MAAM,CAAC;YACtC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC;YAEhC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,EAAE,CAAC;YACnC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC;YACzC,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC;YAC/B,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,CAAC,CAAC;YAC5C,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,CAAC,CAAC;YAC1C,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,IAAI,CAAC;YAC7C,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,IAAI,IAAI,CAAC;YACnD,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,MAAM,CAAC;YACvC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;YAC3E,IAAI,CAAC,MAAM,GAAG,OAAO,OAAO,CAAC,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;YAC5F,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC;YAE1B,IAAI,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,QAAQ,EAAE;gBACjC,QAAQ,EAAE,CAAC;aACd;YAED,OAAO,IAAI,CAAC;QAChB,CAAC;QACL,iBAAC;IAAD,CAAC,AAvsCD,IAusCC;IAvsCY,gBAAU,aAusCtB,CAAA;AACL,CAAC,EA9tCS,KAAK,KAAL,KAAK,QA8tCd","sourcesContent":["\r\ndeclare namespace Slick\r\n{\r\n    type Handler<TArgs> = (e: JQueryEventObject, args: TArgs) => void;\r\n    \r\n    interface IEventData {\r\n        isPropagationStopped(): boolean;\r\n        isImmediatePropagationStopped(): boolean;\r\n    }\r\n\r\n    class EventData {\r\n        constructor();\r\n        isPropagationStopped(): boolean;\r\n        isImmediatePropagationStopped(): boolean;\r\n    }\r\n\r\n    class Event<TArgs = any> {\r\n        subscribe(handler: Handler<TArgs>): void;\r\n        unsubscribe(handler: Handler<TArgs>): void;\r\n        notify(args?: TArgs, e?: IEventData, scope?: any): void;\r\n        clear(): void;\r\n    }\r\n\r\n    class EventHandler<TArgs = any> {\r\n        subscribe<TArgs>(event: Event<TArgs>, handler: Handler<TArgs>): EventHandler<TArgs>;\r\n        unsubscribe<TArgs>(event: Event<TArgs>, handler: Handler<TArgs>): EventHandler<TArgs>;\r\n        unsubscribeAll(): EventHandler<TArgs>;\r\n    }\r\n}","declare namespace Slick.Data {\r\n    class GroupItemMetadataProvider implements Slick.GroupItemMetadataProvider {\r\n        constructor();\r\n        getGroupRowMetadata(item: any): any;\r\n        getTotalsRowMetadata(item: any): any;\r\n    }\r\n}\r\n\r\ndeclare namespace Slick {\r\n    interface GroupItemMetadataProvider {\r\n        getGroupRowMetadata(item: any): any;\r\n        getTotalsRowMetadata(item: any): any;\r\n    }\r\n\r\n    class Group<TEntity> {\r\n        isGroup: boolean;\r\n        level: number;\r\n        count: number;\r\n        value: any;\r\n        title: string;\r\n        collapsed: boolean;\r\n        totals: any;\r\n        rows: any;\r\n        groups: Group<TEntity>[];\r\n        groupingKey: string;\r\n    }\r\n    \r\n    class GroupTotals<TEntity> {\r\n        isGroupTotals: boolean;\r\n        group: Group<TEntity>;\r\n        initialized: boolean;\r\n        sum: any;\r\n        avg: any;\r\n        min: any;\r\n        max: any;\r\n    }\r\n\r\n    interface GroupInfo<TItem> {\r\n        getter?: any;\r\n        formatter?: (p1: Slick.Group<TItem>) => string;\r\n        comparer?: (a: Slick.Group<TItem>, b: Slick.Group<TItem>) => number;\r\n        aggregators?: any[];\r\n        aggregateCollapsed?: boolean;\r\n        lazyTotalsCalculation?: boolean;\r\n    }\r\n\r\n}","declare namespace Slick {\r\n    interface FormatterContext {\r\n        row?: number;\r\n        cell?: number;\r\n        value?: any;\r\n        column?: any;\r\n        item?: any;\r\n    }\r\n\r\n    interface Formatter {\r\n        format(ctx: FormatterContext): string;\r\n    }\r\n\r\n    export type Format = (ctx: Slick.FormatterContext) => string;\r\n\r\n    type AsyncPostRender = (cellNode: any, row: number, item: any, column: Slick.Column, clean?: boolean) => void;\r\n    type ColumnFormatter = (row: number, cell: number, value: any, column: Slick.Column, item: any) => string;\r\n}","declare namespace Slick {\r\n    interface Column {\r\n        asyncPostRender?: Slick.AsyncPostRender;\r\n        behavior?: any;\r\n        cannotTriggerInsert?: boolean;\r\n        cssClass?: string;\r\n        defaultSortAsc?: boolean;\r\n        editor?: Function;\r\n        field: string;\r\n        focusable?: boolean;\r\n        formatter?: Slick.ColumnFormatter;\r\n        headerCssClass?: string;\r\n        id?: string;\r\n        maxWidth?: any;\r\n        minWidth?: number;\r\n        name?: string;\r\n        rerenderOnResize?: boolean;\r\n        resizable?: boolean;\r\n        selectable?: boolean;\r\n        sortable?: boolean;\r\n        toolTip?: string;\r\n        width?: number;\r\n        format?: (ctx: Slick.FormatterContext) => string;\r\n        referencedFields?: string[];\r\n        sourceItem?: Serenity.PropertyItem;\r\n        sortOrder?: number;\r\n        groupTotalsFormatter?: (p1?: GroupTotals<any>, p2?: Column) => string;\r\n        visible?: boolean;\r\n    }\r\n}","declare namespace Slick {\r\n    interface GridOptions {\r\n        asyncEditorLoading?: boolean;\r\n        asyncEditorLoadDelay?: number;\r\n        asyncPostRenderDelay?: number;\r\n        asyncPostRenderCleanupDelay?: number;\r\n        autoEdit?: boolean;\r\n        autoHeight?: boolean;\r\n        cellFlashingCssClass?: string;\r\n        cellHighlightCssClass?: string;\r\n        dataItemColumnValueExtractor?: () => void;\r\n        groupingPanel?: boolean,\r\n        groupingPanelHeight?: number;\r\n        setGroupingPanelVisibility?: (value: boolean) => void;\r\n        defaultColumnWidth?: number;\r\n        defaultFormatter?: () => void;\r\n        editable?: boolean;\r\n        editCommandHandler?: () => void;\r\n        editorFactory?: () => void;\r\n        editorLock?: any;\r\n        enableAddRow?: boolean;\r\n        enableAsyncPostRender?: boolean;\r\n        enableAsyncPostRenderCleanup?: boolean;\r\n        enableCellRangeSelection?: boolean;\r\n        enableCellNavigation?: boolean;\r\n        enableColumnReorder?: boolean;\r\n        enableRowReordering?: boolean;\r\n        enableTextSelectionOnCells?: boolean;\r\n        explicitInitialization?: boolean;\r\n        forceFitColumns?: boolean;\r\n        forceSyncScrolling?: boolean;\r\n        formatterFactory?: () => void;\r\n        fullWidthRows?: boolean;\r\n        frozenColumn?: number;\r\n        frozenRow?: number;\r\n        frozenBottom?: boolean;\r\n        headerRowHeight?: number;\r\n        leaveSpaceForNewRows?: boolean;\r\n        minBuffer?: number;\r\n        multiColumnSort?: boolean;\r\n        multiSelect?: boolean;\r\n        renderAllCells?: boolean;\r\n        rowHeight?: number;\r\n        selectedCellCssClass?: string;\r\n        showHeaderRow?: boolean;\r\n        showFooterRow?: boolean;\r\n        syncColumnCellResize?: boolean;\r\n        topPanelHeight?: number;\r\n    }\r\n}","declare namespace Slick {\r\n    class Grid {\r\n        constructor(container: JQuery, data: any, columns: Column[], options: GridOptions);\r\n    }\r\n\r\n    interface ColumnSort {\r\n        columnId?: string;\r\n        sortAsc?: boolean;\r\n    }\r\n    \r\n    interface RowCell {\r\n        row: number;\r\n        cell: number;\r\n    }\r\n\r\n    interface PositionInfo {\r\n        bottom: number;\r\n        height: number;\r\n        left: number;\r\n        right: number;\r\n        top: number;\r\n        visible: boolean;\r\n        width: number;\r\n    }\r\n\r\n    interface RangeInfo {\r\n        top?: number;\r\n        bottom?: number;\r\n        leftPx?: number;\r\n        rightPx?: number;\r\n    }\r\n\r\n    class RowSelectionModel {\r\n    }\r\n\r\n    interface Grid {\r\n        init(): void;\r\n        destroy(): void;\r\n        getData(): any[];\r\n        getDataItem(index: number): any;\r\n        setData(data: any[], scrollToTop: boolean): void;\r\n        getDataLength(): number;\r\n        getOptions(): GridOptions;\r\n        setOptions(options: GridOptions): void;\r\n        getSelectedRows(): any;\r\n        getSelectionModel(): any;\r\n        setSelectionModel(model: any): any;\r\n        setSelectedRows(rows: any): void;\r\n        autoSizeColumns(): void;\r\n        getColumnIndex(id: string): number;\r\n        getColumns(): Column[];\r\n        getUID(): string;\r\n        setColumns(columns: Column[]): void;\r\n        setSortColumn(columnId: string, ascending: boolean): void;\r\n        setSortColumns(cols: ColumnSort[]): void;\r\n        updateColumnHeader(columnId: string, title: string, toolTip: string): void;\r\n        addCellCssStyles(key: string, hash: any): void;\r\n        canCellBeActive(row: number, col: number): boolean;\r\n        canCellBeSelected(row: number, col: number): boolean;\r\n        editActiveCell(editor: Function): void;\r\n        flashCell(row: number, cell: number, speed: number): void;\r\n        getActiveCell(): RowCell;\r\n        getActiveCellNode(): any;\r\n        getActiveCellPosition(): PositionInfo;\r\n        getCellCssStyles(key: string): any;\r\n        getCellEditor(): any;\r\n        getCellFromEvent(e: any): RowCell;\r\n        getCellFromPoint(x: number, y: number): RowCell;\r\n        getCellNode(row: number, cell: number): any;\r\n        getCellNodeBox(row: number, cell: number): PositionInfo;\r\n        goToCell(row: number, cell: number, forceEdit: boolean): void;\r\n        navigateDown(): void;\r\n        navigateLeft(): void;\r\n        navigateNext(): void;\r\n        navigatePrev(): void;\r\n        navigateRight(): void;\r\n        navigateUp(): void;\r\n        removeCellCssStyles(key: string): void;\r\n        resetActiveCell(): void;\r\n        registerPlugin(plugin: any): void;\r\n        setActiveCell(row: number, cell: number): void;\r\n        setCellCssStyles(key: string, hash: any): void;\r\n        getCanvasNode(): any;\r\n        getGridPosition(): PositionInfo;\r\n        getRenderedRange(viewportTop: number, viewportLeft: number): RangeInfo;\r\n        getViewport(viewportTop: number, viewportLeft: number): RangeInfo;\r\n        getViewport(): RangeInfo;\r\n        invalidate(): void;\r\n        invalidateAllRows(): void;\r\n        invalidateRow(row: number): void;\r\n        invalidateRows(rows: any): void;\r\n        render(): void;\r\n        resizeCanvas(): void;\r\n        scrollCellIntoView(row: number, cell: number): void;\r\n        scrollRowIntoView(row: number, doPaging: boolean): void;\r\n        scrollRowToTop(row: number): void;\r\n        updateCell(row: number, cell: number): void;\r\n        updateRow(row: number): void;\r\n        updateRowCount(): void;\r\n        updateColumnHeader(columnId: string, title?: string, toolTip?: string): void;\r\n        getGroupingPanel(): HTMLDivElement;\r\n        getHeaderRow(): any;\r\n        getEditorLock(): any;\r\n        getHeaderRowColumn(columnId: string): any;\r\n        getSortColumns(): any;\r\n        getTopPanel(): any;\r\n        setHeaderRowVisibility(visible: boolean): void;\r\n        onScroll?: Event;\r\n        onSort?: Event;\r\n        onHeaderContextMenu?: Event;\r\n        onHeaderClick?: Event;\r\n        onMouseEnter?: Event;\r\n        onMouseLeave?: Event;\r\n        onClick?: Event;\r\n        onDblClick?: Event;\r\n        onContextMenu?: Event;\r\n        onKeyDown?: Event;\r\n        onAddNewRow?: Event;\r\n        onValidationError?: Event;\r\n        onViewportChanged?: Event;\r\n        onColumnsReordered?: Event;\r\n        onColumnsResized?: Event;\r\n        onCellChange?: Event;\r\n        onBeforeEditCell?: Event;\r\n        onBeforeCellEditorDestroy?: Event;\r\n        onHeaderCellRendered?: Event;\r\n        onBeforeHeaderCellDestroy?: Event;\r\n        onBeforeDestroy?: Event;\r\n        onActiveCellChanged?: Event;\r\n        onActiveCellPositionChanged?: Event;\r\n        onDragInit?: Event;\r\n        onDragStart?: Event;\r\n        onDrag?: Event;\r\n        onDragEnd?: Event;\r\n        onSelectedRowsChanged?: Event;\r\n        onCellCssStylesChanged?: Event;\r\n    }\r\n}","\r\nnamespace Slick.Aggregators\r\n{\r\n    export function Avg(field: string): void {\r\n        this.field_ = field;\r\n\r\n        this.init = function () {\r\n            this.count_ = 0;\r\n            this.nonNullCount_ = 0;\r\n            this.sum_ = 0;\r\n        };\r\n\r\n        this.accumulate = function (item: any) {\r\n            var val = item[this.field_];\r\n            this.count_++;\r\n            if (val != null && val !== \"\" && !isNaN(val)) {\r\n                this.nonNullCount_++;\r\n                this.sum_ += parseFloat(val);\r\n            }\r\n        };\r\n\r\n        this.storeResult = function (groupTotals: any) {\r\n            if (!groupTotals.avg) {\r\n                groupTotals.avg = {};\r\n            }\r\n            if (this.nonNullCount_ != 0) {\r\n                groupTotals.avg[this.field_] = this.sum_ / this.nonNullCount_;\r\n            }\r\n        };\r\n    }\r\n\r\n    export function WeightedAvg(field: string, weightedField: string) {\r\n        this.field_ = field;\r\n        this.weightedField_ = weightedField;\r\n\r\n        this.init = function () {\r\n            this.sum_ = 0;\r\n            this.weightedSum_ = 0;\r\n        };\r\n\r\n        this.accumulate = function (item: any) {\r\n            var val = item[this.field_];\r\n            var valWeighted = item[this.weightedField_];\r\n            if (this.isValid(val) && this.isValid(valWeighted)) {\r\n                this.weightedSum_ += parseFloat(valWeighted);\r\n                this.sum_ += parseFloat(val) * parseFloat(valWeighted);\r\n            }\r\n        };\r\n\r\n        this.storeResult = function (groupTotals: any) {\r\n            if (!groupTotals.avg) {\r\n                groupTotals.avg = {};\r\n            }\r\n\r\n            if (this.sum_ && this.weightedSum_) {\r\n                groupTotals.avg[this.field_] = this.sum_ / this.weightedSum_;\r\n            }\r\n        };\r\n\r\n        this.isValid = function (val: any) {\r\n            return val !== null && val !== \"\" && !isNaN(val);\r\n        };\r\n    }\r\n\r\n    export function Min(field: string): void {\r\n        this.field_ = field;\r\n\r\n        this.init = function () {\r\n            this.min_ = null;\r\n        };\r\n\r\n        this.accumulate = function (item: any) {\r\n            var val = item[this.field_];\r\n            if (val != null && val !== \"\" && !isNaN(val)) {\r\n                if (this.min_ == null || val < this.min_) {\r\n                    this.min_ = val;\r\n                }\r\n            }\r\n        };\r\n\r\n        this.storeResult = function (groupTotals: any) {\r\n            if (!groupTotals.min) {\r\n                groupTotals.min = {};\r\n            }\r\n            groupTotals.min[this.field_] = this.min_;\r\n        }\r\n    }\r\n\r\n    export function Max(field: string): void {\r\n        this.field_ = field;\r\n\r\n        this.init = function () {\r\n            this.max_ = null;\r\n        };\r\n\r\n        this.accumulate = function (item: any) {\r\n            var val = item[this.field_];\r\n            if (val != null && val !== \"\" && !isNaN(val)) {\r\n                if (this.max_ == null || val > this.max_) {\r\n                    this.max_ = val;\r\n                }\r\n            }\r\n        };\r\n\r\n        this.storeResult = function (groupTotals: any) {\r\n            if (!groupTotals.max) {\r\n                groupTotals.max = {};\r\n            }\r\n            groupTotals.max[this.field_] = this.max_;\r\n        }\r\n    }\r\n\r\n    export function Sum(field: string): void {\r\n        this.field_ = field;\r\n\r\n        this.init = function () {\r\n            this.sum_ = null;\r\n        };\r\n\r\n        this.accumulate = function (item: any) {\r\n            var val = item[this.field_];\r\n            if (val != null && val !== \"\" && !isNaN(val)) {\r\n                this.sum_ += parseFloat(val);\r\n            }\r\n        };\r\n\r\n        this.storeResult = function (groupTotals: any) {\r\n            if (!groupTotals.sum) {\r\n                groupTotals.sum = {};\r\n            }\r\n            groupTotals.sum[this.field_] = this.sum_;\r\n        }\r\n    }\r\n}","namespace Slick {\r\n    export interface RemoteViewOptions {\r\n        autoLoad?: boolean;\r\n        idField?: string;\r\n        contentType?: string;\r\n        dataType?: string;\r\n        filter?: any;\r\n        params?: any;\r\n        onSubmit?: CancellableViewCallback<any>;\r\n        url?: string;\r\n        sortBy?: any;\r\n        rowsPerPage?: number;\r\n        seekToPage?: number;\r\n        onProcessData?: RemoteViewProcessCallback<any>;\r\n        method?: string;\r\n        inlineFilters?: boolean;\r\n        groupItemMetadataProvider?: Slick.GroupItemMetadataProvider;\r\n        onAjaxCall?: Slick.RemoteViewAjaxCallback<any>;\r\n        getItemMetadata?: (p1?: any, p2?: number) => any;\r\n        errorMsg?: string;\r\n    }\r\n\r\n    export class RemoteView<TEntity> {\r\n        constructor(options: RemoteViewOptions) {\r\n            var self = this;\r\n\r\n            var defaults = {\r\n                groupItemMetadataProvider: <any>null,\r\n                inlineFilters: false\r\n            }\r\n\r\n            var idProperty: string;\r\n            var items: any[] = [];\r\n            var rows: any[] = [];\r\n            var idxById = {};\r\n            var rowsById: any = null;\r\n            var filter: any = null;\r\n            var updated: any = null;\r\n            var suspend = 0;\r\n\r\n            var sortAsc = true;\r\n            var fastSortField: string;\r\n            var sortComparer: any;\r\n            var refreshHints: any = {};\r\n            var prevRefreshHints: any = {};\r\n            var filterArgs: any;\r\n            var filteredItems: any = [];\r\n            var compiledFilter: any;\r\n            var compiledFilterWithCaching: any;\r\n            var filterCache: any[] = [];\r\n\r\n            var groupingInfoDefaults = {\r\n                getter: <any>null,\r\n                formatter: <any>null,\r\n                comparer: function (a: any, b: any) {\r\n                    return (a.value === b.value ? 0 :\r\n                        (a.value > b.value ? 1 : -1)\r\n                    );\r\n                },\r\n                predefinedValues: <any[]>[],\r\n                aggregateEmpty: false,\r\n                aggregateCollapsed: false,\r\n                aggregateChildGroups: false,\r\n                collapsed: false,\r\n                displayTotalsRow: true,\r\n                lazyTotalsCalculation: false\r\n            };\r\n            var summaryOptions: any = {};\r\n            var groupingInfos: any[] = [];\r\n            var groups: any[] = [];\r\n            var toggledGroupsByLevel: any[] = [];\r\n            var groupingDelimiter = ':|:';\r\n\r\n            var page = 1;\r\n            var totalRows = 0;\r\n\r\n            var onRowCountChanged = new Event();\r\n            var onRowsChanged = new Event();\r\n            var onPagingInfoChanged = new Event();\r\n\r\n            var loading: any = false;\r\n            var errorMessage: string = null;\r\n            var populateLocks = 0;\r\n            var populateCalls = 0;\r\n            var contentType: string;\r\n            var dataType: string;\r\n            var totalCount: number = null;\r\n            var onDataChanged = new Event();\r\n            var onDataLoading = new Event();\r\n            var onDataLoaded = new Event();\r\n            var onClearData = new Event();\r\n            var intf: this;\r\n\r\n            function beginUpdate() {\r\n                suspend++;\r\n            }\r\n\r\n            function endUpdate() {\r\n                suspend--;\r\n                if (suspend <= 0)\r\n                    refresh();\r\n            }\r\n\r\n            function setRefreshHints(hints: any) {\r\n                refreshHints = hints;\r\n            }\r\n\r\n            function setFilterArgs(args: any) {\r\n                filterArgs = args;\r\n            }\r\n\r\n            function updateIdxById(startingIndex?: number) {\r\n                startingIndex = startingIndex || 0;\r\n                var id: any;\r\n                for (var i = startingIndex, l = items.length; i < l; i++) {\r\n                    id = items[i][idProperty];\r\n                    if (id === undefined) {\r\n                        var msg = \"Each data element must implement a unique '\" +\r\n                            idProperty + \"' property. Object at index '\" + i + \"' \" +\r\n                            \"has no identity value: \";\r\n\r\n                        msg += (<any>$).toJSON(items[i]);\r\n                        throw msg;\r\n                    }\r\n                    idxById[id] = i;\r\n                }\r\n            }\r\n\r\n            function ensureIdUniqueness() {\r\n                var id: any;\r\n                for (var i = 0, l = items.length; i < l; i++) {\r\n                    id = items[i][idProperty];\r\n                    if (id === undefined || idxById[id] !== i) {\r\n                        var msg = \"Each data element must implement a unique '\" +\r\n                            idProperty + \"' property. Object at index '\" + i + \"' \";\r\n\r\n                        if (id == undefined)\r\n                            msg += \"has no identity value: \";\r\n                        else\r\n                            msg += \"has repeated identity value '\" + id + \"': \";\r\n\r\n                        msg += (<any>$).toJSON(items[i]);\r\n                        throw msg;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function getItems() {\r\n                return items;\r\n            }\r\n\r\n            function setItems(data: any[]) {\r\n                items = filteredItems = data;\r\n                idxById = {};\r\n                rowsById = null;\r\n                summaryOptions.totals = {};\r\n                updateIdxById();\r\n                ensureIdUniqueness();\r\n\r\n                if (suspend) {\r\n                    recalc(items);\r\n                }\r\n                else {\r\n                    refresh();\r\n                }\r\n\r\n                onDataChanged.notify({ dataView: self }, null, self);\r\n            }\r\n\r\n            function setPagingOptions(args: any) {\r\n                var anyChange = false;\r\n\r\n                if (args.rowsPerPage != undefined &&\r\n                    intf.rowsPerPage != args.rowsPerPage) {\r\n                    intf.rowsPerPage = args.rowsPerPage;\r\n                    anyChange = true;\r\n                }\r\n\r\n                if (args.page != undefined) {\r\n                    var newPage: number;\r\n                    if (!intf.rowsPerPage)\r\n                        newPage = 1;\r\n                    else if (totalCount == null)\r\n                        newPage = args.page;\r\n                    else\r\n                        newPage = Math.min(args.page, Math.ceil(totalCount / intf.rowsPerPage) + 1);\r\n\r\n                    if (newPage < 1)\r\n                        newPage = 1;\r\n\r\n                    if (newPage != page) {\r\n                        intf.seekToPage = newPage;\r\n                        anyChange = true;\r\n                    }\r\n                }\r\n\r\n                if (anyChange)\r\n                    populate();\r\n            }\r\n\r\n            function getPagingInfo() {\r\n                return {\r\n                    rowsPerPage: intf.rowsPerPage,\r\n                    page: page,\r\n                    totalCount: totalCount,\r\n                    loading: loading,\r\n                    error: errorMessage,\r\n                    dataView: self\r\n                };\r\n            }\r\n\r\n            function sort(comparer: any, ascending: boolean) {\r\n                sortAsc = ascending;\r\n                sortComparer = comparer;\r\n                fastSortField = null;\r\n                if (ascending === false) {\r\n                    items.reverse();\r\n                }\r\n                items.sort(comparer);\r\n                if (ascending === false) {\r\n                    items.reverse();\r\n                }\r\n                idxById = {};\r\n                updateIdxById();\r\n                refresh();\r\n            }\r\n\r\n            /***\r\n             * Provides a workaround for the extremely slow sorting in IE.\r\n             * Does a [lexicographic] sort on a give column by temporarily overriding Object.prototype.toString\r\n             * to return the value of that field and then doing a native Array.sort().\r\n             */\r\n            function fastSort(field: any, ascending: boolean) {\r\n                sortAsc = ascending;\r\n                fastSortField = field;\r\n                sortComparer = null;\r\n                var oldToString = Object.prototype.toString;\r\n                Object.prototype.toString = (typeof field === \"function\") ? field : function () {\r\n                    return this[field]\r\n                };\r\n                // an extra reversal for descending sort keeps the sort stable\r\n                // (assuming a stable native sort implementation, which isn't true in some cases)\r\n                if (ascending === false) {\r\n                    items.reverse();\r\n                }\r\n                items.sort();\r\n                Object.prototype.toString = oldToString;\r\n                if (ascending === false) {\r\n                    items.reverse();\r\n                }\r\n                idxById = {};\r\n                updateIdxById();\r\n                refresh();\r\n            }\r\n\r\n            function reSort() {\r\n                if (sortComparer) {\r\n                    sort(sortComparer, sortAsc);\r\n                } else if (fastSortField) {\r\n                    fastSort(fastSortField, sortAsc);\r\n                }\r\n            }\r\n\r\n            function setFilter(filterFn: any) {\r\n                filter = filterFn;\r\n                if (options.inlineFilters) {\r\n                    compiledFilter = compileFilter();\r\n                    compiledFilterWithCaching = compileFilterWithCaching();\r\n                }\r\n                refresh();\r\n            }\r\n\r\n            function getGrouping() {\r\n                return groupingInfos;\r\n            }\r\n\r\n            function setSummaryOptions(summary: any) {\r\n                summary = summary || {};\r\n                summaryOptions.aggregators = summary.aggregators || [];\r\n                summaryOptions.compiledAccumulators = [];\r\n                summaryOptions.totals = {};\r\n                var idx = summaryOptions.aggregators.length;\r\n                while (idx--) {\r\n                    summaryOptions.compiledAccumulators[idx] = compileAccumulatorLoop(summaryOptions.aggregators[idx]);\r\n                }\r\n                setGrouping(groupingInfos || []);\r\n            }\r\n\r\n            function getGrandTotals() {\r\n                summaryOptions.totals = summaryOptions.totals || {};\r\n\r\n                if (!summaryOptions.totals.initialized) {\r\n                    summaryOptions.aggregators = summaryOptions.aggregators || [];\r\n                    summaryOptions.compiledAccumulators = summaryOptions.compiledAccumulators || [];\r\n                    var agg: any, idx = summaryOptions.aggregators.length;\r\n\r\n                    while (idx--) {\r\n                        agg = summaryOptions.aggregators[idx];\r\n                        agg.init();\r\n                        summaryOptions.compiledAccumulators[idx].call(agg, items);\r\n                        agg.storeResult(summaryOptions.totals);\r\n                    }\r\n                    summaryOptions.totals.initialized = true;\r\n                }\r\n\r\n                return summaryOptions.totals;\r\n            }\r\n\r\n            function setGrouping(groupingInfo: any) {\r\n                if (!options.groupItemMetadataProvider) {\r\n                    options.groupItemMetadataProvider = new Slick.Data.GroupItemMetadataProvider();\r\n                }\r\n\r\n                groups = [];\r\n                toggledGroupsByLevel = [];\r\n                groupingInfo = groupingInfo || [];\r\n                groupingInfos = (groupingInfo instanceof Array) ? groupingInfo : [groupingInfo];\r\n\r\n                for (var i = 0; i < groupingInfos.length; i++) {\r\n                    var gi = groupingInfos[i] = Q.extend(Q.extend<any>({}, groupingInfoDefaults), Q.deepClone(groupingInfos[i]));\r\n                    gi.aggregators = gi.aggregators || summaryOptions.aggregators || [];\r\n                    gi.getterIsAFn = typeof gi.getter === \"function\";\r\n\r\n                    // pre-compile accumulator loops\r\n                    gi.compiledAccumulators = [];\r\n                    var idx = gi.aggregators.length;\r\n                    while (idx--) {\r\n                        gi.compiledAccumulators[idx] = compileAccumulatorLoop(gi.aggregators[idx]);\r\n                    }\r\n\r\n                    toggledGroupsByLevel[i] = {};\r\n                }\r\n\r\n                refresh();\r\n            }\r\n\r\n            function getItemByIdx(i: number) {\r\n                return items[i];\r\n            }\r\n\r\n            function getIdxById(id: any) {\r\n                return idxById[id];\r\n            }\r\n\r\n            function ensureRowsByIdCache() {\r\n                if (!rowsById) {\r\n                    rowsById = {};\r\n                    for (var i = 0, l = rows.length; i < l; i++) {\r\n                        rowsById[rows[i][idProperty]] = i;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function getRowById(id: any) {\r\n                ensureRowsByIdCache();\r\n                return rowsById[id];\r\n            }\r\n\r\n            function getItemById(id: any) {\r\n                return items[idxById[id]];\r\n            }\r\n\r\n            function mapIdsToRows(idArray: any[]) {\r\n                var rows: any[] = [];\r\n                ensureRowsByIdCache();\r\n                for (var i = 0, l = idArray.length; i < l; i++) {\r\n                    var row = rowsById[idArray[i]];\r\n                    if (row != null) {\r\n                        rows[rows.length] = row;\r\n                    }\r\n                }\r\n                return rows;\r\n            }\r\n\r\n            function mapRowsToIds(rowArray: any[]) {\r\n                var ids: any[] = [];\r\n                for (var i = 0, l = rowArray.length; i < l; i++) {\r\n                    if (rowArray[i] < rows.length) {\r\n                        ids[ids.length] = rows[rowArray[i]][idProperty];\r\n                    }\r\n                }\r\n                return ids;\r\n            }\r\n\r\n            function updateItem(id: any, item: any) {\r\n                if (idxById[id] === undefined || id !== item[idProperty]) {\r\n                    throw \"Invalid or non-matching id\";\r\n                }\r\n                items[idxById[id]] = item;\r\n                if (!updated) {\r\n                    updated = {};\r\n                }\r\n                updated[id] = true;\r\n                refresh();\r\n            }\r\n\r\n            function insertItem(insertBefore: number, item: any) {\r\n                items.splice(insertBefore, 0, item);\r\n                updateIdxById(insertBefore);\r\n                refresh();\r\n            }\r\n\r\n            function addItem(item: any) {\r\n                items.push(item);\r\n                updateIdxById(items.length - 1);\r\n                refresh();\r\n            }\r\n\r\n            function deleteItem(id: any) {\r\n                var idx = idxById[id];\r\n                if (idx === undefined) {\r\n                    throw \"Invalid id\";\r\n                }\r\n                delete idxById[id];\r\n                items.splice(idx, 1);\r\n                updateIdxById(idx);\r\n                refresh();\r\n            }\r\n\r\n            function getRows() {\r\n                return rows;\r\n            }\r\n\r\n            function getLength() {\r\n                return rows.length;\r\n            }\r\n\r\n            function getItem(i: number) {\r\n                var item = rows[i];\r\n\r\n                // if this is a group row, make sure totals are calculated and update the title\r\n                if (item && item.__group && item.totals && !item.totals.initialized) {\r\n                    var gi = groupingInfos[item.level];\r\n                    if (!gi.displayTotalsRow) {\r\n                        calculateTotals(item.totals);\r\n                        item.title = gi.formatter ? gi.formatter(item) : item.value;\r\n                    }\r\n                }\r\n                // if this is a totals row, make sure it's calculated\r\n                else if (item && item.__groupTotals && !item.initialized) {\r\n                    calculateTotals(item);\r\n                }\r\n\r\n                return item;\r\n            }\r\n\r\n            function getItemMetadata(i: number) {\r\n                var item = rows[i];\r\n                if (item === undefined) {\r\n                    return null;\r\n                }\r\n\r\n                // overrides for grouping rows\r\n                if (item.__group) {\r\n                    return options.groupItemMetadataProvider.getGroupRowMetadata(item);\r\n                }\r\n\r\n                // overrides for totals rows\r\n                if (item.__groupTotals) {\r\n                    return options.groupItemMetadataProvider.getTotalsRowMetadata(item);\r\n                }\r\n\r\n                return (options.getItemMetadata && options.getItemMetadata(item, i)) || null;\r\n            }\r\n\r\n            function expandCollapseAllGroups(level: number, collapse: boolean) {\r\n                if (level == null) {\r\n                    for (var i = 0; i < groupingInfos.length; i++) {\r\n                        toggledGroupsByLevel[i] = {};\r\n                        groupingInfos[i].collapsed = collapse;\r\n                    }\r\n                } else {\r\n                    toggledGroupsByLevel[level] = {};\r\n                    groupingInfos[level].collapsed = collapse;\r\n                }\r\n                refresh();\r\n            }\r\n\r\n            /**\r\n             * @param level {Number} Optional level to collapse.  If not specified, applies to all levels.\r\n             */\r\n            function collapseAllGroups(level: number) {\r\n                expandCollapseAllGroups(level, true);\r\n            }\r\n\r\n            /**\r\n             * @param level {Number} Optional level to expand.  If not specified, applies to all levels.\r\n             */\r\n            function expandAllGroups(level: number) {\r\n                expandCollapseAllGroups(level, false);\r\n            }\r\n\r\n            function resolveLevelAndGroupingKey(args: any) {\r\n                var arg0 = args[0];\r\n                if (args.length === 1 && arg0.indexOf(groupingDelimiter) !== -1) {\r\n                    return { level: arg0.split(groupingDelimiter).length - 1, groupingKey: arg0 };\r\n                } else {\r\n                    return { level: args.length - 1, groupingKey: args.join(groupingDelimiter) };\r\n                }\r\n            }\r\n\r\n            function expandCollapseGroup(args: any, collapse: any) {\r\n                var opts = resolveLevelAndGroupingKey(args);\r\n                toggledGroupsByLevel[opts.level][opts.groupingKey] = groupingInfos[opts.level].collapsed ^ collapse;\r\n                refresh();\r\n            }\r\n\r\n            /**\r\n             * @param varArgs Either a Slick.Group's \"groupingKey\" property, or a\r\n             *     variable argument list of grouping values denoting a unique path to the row.  For\r\n             *     example, calling collapseGroup('high', '10%') will collapse the '10%' subgroup of\r\n             *     the 'high' group.\r\n             */\r\n            function collapseGroup(varArgs: any[]) {\r\n                var args = Array.prototype.slice.call(arguments);\r\n                expandCollapseGroup(args, true);\r\n            }\r\n\r\n            /**\r\n             * @param varArgs Either a Slick.Group's \"groupingKey\" property, or a\r\n             *     variable argument list of grouping values denoting a unique path to the row.  For\r\n             *     example, calling expandGroup('high', '10%') will expand the '10%' subgroup of\r\n             *     the 'high' group.\r\n             */\r\n            function expandGroup(varArgs: any[]) {\r\n                var args = Array.prototype.slice.call(arguments);\r\n                expandCollapseGroup(args, false);\r\n            }\r\n\r\n            function getGroups() {\r\n                return groups;\r\n            }\r\n\r\n            function getOrCreateGroup(groupsByVal: any, val: any, level: number, parentGroup: any, groups: any[]) {\r\n                var group = groupsByVal[val];\r\n\r\n                if (!group) {\r\n                    group = new Slick.Group<any>();\r\n                    group.value = val;\r\n                    group.level = level;\r\n                    group.groupingKey = (parentGroup ? parentGroup.groupingKey + groupingDelimiter : '') + val;\r\n                    groups[groups.length] = group;\r\n                    groupsByVal[val] = group;\r\n                }\r\n\r\n                return group;\r\n            }\r\n\r\n            function extractGroups(rows: any[], parentGroup?: any) {\r\n                var group: any;\r\n                var val: any;\r\n                var groups: any[] = [];\r\n                var groupsByVal = {};\r\n                var r: any;\r\n                var level = parentGroup ? parentGroup.level + 1 : 0;\r\n                var gi = groupingInfos[level];\r\n\r\n                for (var i = 0, l: number = gi.predefinedValues.length; i < l; i++) {\r\n                    val = gi.predefinedValues[i];\r\n                    group = getOrCreateGroup(groupsByVal, val, level, parentGroup, groups);\r\n                }\r\n\r\n                for (var i = 0, l = rows.length; i < l; i++) {\r\n                    r = rows[i];\r\n                    val = gi.getterIsAFn ? gi.getter(r) : r[gi.getter];\r\n                    group = getOrCreateGroup(groupsByVal, val, level, parentGroup, groups);\r\n\r\n                    group.rows[group.count++] = r;\r\n                }\r\n\r\n                if (level < groupingInfos.length - 1) {\r\n                    for (var i = 0; i < groups.length; i++) {\r\n                        group = groups[i];\r\n                        group.groups = extractGroups(group.rows, group);\r\n                    }\r\n                }\r\n\r\n                groups.sort(groupingInfos[level].comparer);\r\n\r\n                return groups;\r\n            }\r\n\r\n            function calculateTotals(totals: any) {\r\n                var group = totals.group;\r\n                var gi = groupingInfos[group.level];\r\n                var isLeafLevel = (group.level == groupingInfos.length);\r\n                var agg: any, idx = gi.aggregators.length;\r\n\r\n                if (!isLeafLevel && gi.aggregateChildGroups) {\r\n                    // make sure all the subgroups are calculated\r\n                    var i = group.groups.length;\r\n                    while (i--) {\r\n                        if (!group.groups[i].totals.initialized) {\r\n                            calculateTotals(group.groups[i].totals);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                while (idx--) {\r\n                    agg = gi.aggregators[idx];\r\n                    agg.init();\r\n                    if (!isLeafLevel && gi.aggregateChildGroups) {\r\n                        gi.compiledAccumulators[idx].call(agg, group.groups);\r\n                    } else {\r\n                        gi.compiledAccumulators[idx].call(agg, group.rows);\r\n                    }\r\n                    agg.storeResult(totals);\r\n                }\r\n                totals.initialized = true;\r\n            }\r\n\r\n            function addGroupTotals(group: any) {\r\n                var gi = groupingInfos[group.level];\r\n                var totals = new Slick.GroupTotals<TEntity>();\r\n                totals.group = group;\r\n                group.totals = totals;\r\n                if (!gi.lazyTotalsCalculation) {\r\n                    calculateTotals(totals);\r\n                }\r\n            }\r\n\r\n            function addTotals(groups: any[], level?: number) {\r\n                level = level || 0;\r\n                var gi = groupingInfos[level];\r\n                var groupCollapsed = gi.collapsed;\r\n                var toggledGroups = toggledGroupsByLevel[level];\r\n                var idx = groups.length, g: any;\r\n                while (idx--) {\r\n                    g = groups[idx];\r\n\r\n                    if (g.collapsed && !gi.aggregateCollapsed) {\r\n                        continue;\r\n                    }\r\n\r\n                    // Do a depth-first aggregation so that parent group aggregators can access subgroup totals.\r\n                    if (g.groups) {\r\n                        addTotals(g.groups, level + 1);\r\n                    }\r\n\r\n                    if (gi.aggregators.length && (\r\n                        gi.aggregateEmpty || g.rows.length || (g.groups && g.groups.length))) {\r\n                        addGroupTotals(g);\r\n                    }\r\n\r\n                    g.collapsed = groupCollapsed ^ toggledGroups[g.groupingKey];\r\n                    g.title = gi.formatter ? gi.formatter(g) : g.value;\r\n                }\r\n            }\r\n\r\n            function flattenGroupedRows(groups: any[], level?: number) {\r\n                level = level || 0;\r\n                var gi = groupingInfos[level];\r\n                var groupedRows: any[] = [], rows: any[], gl = 0, g: any;\r\n                for (var i = 0, l = groups.length; i < l; i++) {\r\n                    g = groups[i];\r\n                    groupedRows[gl++] = g;\r\n\r\n                    if (!g.collapsed) {\r\n                        rows = g.groups ? flattenGroupedRows(g.groups, level + 1) : g.rows;\r\n                        for (var j = 0, jj = rows.length; j < jj; j++) {\r\n                            groupedRows[gl++] = rows[j];\r\n                        }\r\n                    }\r\n\r\n                    if (g.totals && gi.displayTotalsRow && (!g.collapsed || gi.aggregateCollapsed)) {\r\n                        groupedRows[gl++] = g.totals;\r\n                    }\r\n                }\r\n                return groupedRows;\r\n            }\r\n\r\n            function getFunctionInfo(fn: any) {\r\n                var fnRegex = /^function[^(]*\\(([^)]*)\\)\\s*{([\\s\\S]*)}$/;\r\n                var matches = fn.toString().match(fnRegex);\r\n                return {\r\n                    params: matches[1].split(\",\"),\r\n                    body: matches[2]\r\n                };\r\n            }\r\n\r\n            function compileAccumulatorLoop(aggregator: any) {\r\n                var accumulatorInfo = getFunctionInfo(aggregator.accumulate);\r\n                var fn: any = new Function(\r\n                    \"_items\",\r\n                    \"for (var \" + accumulatorInfo.params[0] + \", _i=0, _il=_items.length; _i<_il; _i++) {\" +\r\n                    accumulatorInfo.params[0] + \" = _items[_i]; \" +\r\n                    accumulatorInfo.body +\r\n                    \"}\"\r\n                );\r\n                fn.displayName = fn.name = \"compiledAccumulatorLoop\";\r\n                return fn;\r\n            }\r\n\r\n            function compileFilter() {\r\n                var filterInfo = getFunctionInfo(filter);\r\n\r\n                var filterBody = filterInfo.body\r\n                    .replace(/return false\\s*([;}]|$)/gi, \"{ continue _coreloop; }$1\")\r\n                    .replace(/return true\\s*([;}]|$)/gi, \"{ _retval[_idx++] = $item$; continue _coreloop; }$1\")\r\n                    .replace(/return ([^;}]+?)\\s*([;}]|$)/gi,\r\n                    \"{ if ($1) { _retval[_idx++] = $item$; }; continue _coreloop; }$2\");\r\n\r\n                // This preserves the function template code after JS compression,\r\n                // so that replace() commands still work as expected.\r\n                var tpl = [\r\n                    //\"function(_items, _args) { \",\r\n                    \"var _retval = [], _idx = 0; \",\r\n                    \"var $item$, $args$ = _args; \",\r\n                    \"_coreloop: \",\r\n                    \"for (var _i = 0, _il = _items.length; _i < _il; _i++) { \",\r\n                    \"$item$ = _items[_i]; \",\r\n                    \"$filter$; \",\r\n                    \"} \",\r\n                    \"return _retval; \"\r\n                    //\"}\"\r\n                ].join(\"\");\r\n                tpl = tpl.replace(/\\$filter\\$/gi, filterBody);\r\n                tpl = tpl.replace(/\\$item\\$/gi, filterInfo.params[0]);\r\n                tpl = tpl.replace(/\\$args\\$/gi, filterInfo.params[1]);\r\n\r\n                var fn: any = new Function(\"_items,_args\", tpl);\r\n                fn.displayName = fn.name = \"compiledFilter\";\r\n                return fn;\r\n            }\r\n\r\n            function compileFilterWithCaching() {\r\n                var filterInfo = getFunctionInfo(filter);\r\n\r\n                var filterBody = filterInfo.body\r\n                    .replace(/return false\\s*([;}]|$)/gi, \"{ continue _coreloop; }$1\")\r\n                    .replace(/return true\\s*([;}]|$)/gi, \"{ _cache[_i] = true;_retval[_idx++] = $item$; continue _coreloop; }$1\")\r\n                    .replace(/return ([^;}]+?)\\s*([;}]|$)/gi,\r\n                    \"{ if ((_cache[_i] = $1)) { _retval[_idx++] = $item$; }; continue _coreloop; }$2\");\r\n\r\n                // This preserves the function template code after JS compression,\r\n                // so that replace() commands still work as expected.\r\n                var tpl = [\r\n                    //\"function(_items, _args, _cache) { \",\r\n                    \"var _retval = [], _idx = 0; \",\r\n                    \"var $item$, $args$ = _args; \",\r\n                    \"_coreloop: \",\r\n                    \"for (var _i = 0, _il = _items.length; _i < _il; _i++) { \",\r\n                    \"$item$ = _items[_i]; \",\r\n                    \"if (_cache[_i]) { \",\r\n                    \"_retval[_idx++] = $item$; \",\r\n                    \"continue _coreloop; \",\r\n                    \"} \",\r\n                    \"$filter$; \",\r\n                    \"} \",\r\n                    \"return _retval; \"\r\n                    //\"}\"\r\n                ].join(\"\");\r\n                tpl = tpl.replace(/\\$filter\\$/gi, filterBody);\r\n                tpl = tpl.replace(/\\$item\\$/gi, filterInfo.params[0]);\r\n                tpl = tpl.replace(/\\$args\\$/gi, filterInfo.params[1]);\r\n\r\n                var fn: any = new Function(\"_items,_args,_cache\", tpl);\r\n                fn.displayName = fn.name = \"compiledFilterWithCaching\";\r\n                return fn;\r\n            }\r\n\r\n            function uncompiledFilter(items: any[], args: any) {\r\n                var retval: any[] = [], idx = 0;\r\n\r\n                for (var i = 0, ii = items.length; i < ii; i++) {\r\n                    if (filter(items[i], args)) {\r\n                        retval[idx++] = items[i];\r\n                    }\r\n                }\r\n\r\n                return retval;\r\n            }\r\n\r\n            function uncompiledFilterWithCaching(items: any[], args: any, cache: any) {\r\n                var retval: any[] = [], idx = 0, item: any;\r\n\r\n                for (var i = 0, ii = items.length; i < ii; i++) {\r\n                    item = items[i];\r\n                    if (cache[i]) {\r\n                        retval[idx++] = item;\r\n                    } else if (filter(item, args)) {\r\n                        retval[idx++] = item;\r\n                        cache[i] = true;\r\n                    }\r\n                }\r\n\r\n                return retval;\r\n            }\r\n\r\n            function getFilteredAndPagedItems(items: any[]) {\r\n                if (filter) {\r\n                    var batchFilter = options.inlineFilters ? compiledFilter : uncompiledFilter;\r\n                    var batchFilterWithCaching = options.inlineFilters ? compiledFilterWithCaching : uncompiledFilterWithCaching;\r\n\r\n                    if (refreshHints.isFilterNarrowing) {\r\n                        filteredItems = batchFilter(filteredItems, filterArgs);\r\n                    } else if (refreshHints.isFilterExpanding) {\r\n                        filteredItems = batchFilterWithCaching(items, filterArgs, filterCache);\r\n                    } else if (!refreshHints.isFilterUnchanged) {\r\n                        filteredItems = batchFilter(items, filterArgs);\r\n                    }\r\n                } else {\r\n                    // special case:  if not filtering and not paging, the resulting\r\n                    // rows collection needs to be a copy so that changes due to sort\r\n                    // can be caught\r\n                    filteredItems = items.concat();\r\n                }\r\n\r\n                // get the current page\r\n                return { totalRows: filteredItems.length, rows: filteredItems };\r\n            }\r\n\r\n            function getRowDiffs(rows: any[], newRows: any[]) {\r\n                var item: any, r: any, eitherIsNonData: boolean, diff: any[] = [];\r\n                var from = 0, to = newRows.length;\r\n\r\n                if (refreshHints && refreshHints.ignoreDiffsBefore) {\r\n                    from = Math.max(0,\r\n                        Math.min(newRows.length, refreshHints.ignoreDiffsBefore));\r\n                }\r\n\r\n                if (refreshHints && refreshHints.ignoreDiffsAfter) {\r\n                    to = Math.min(newRows.length,\r\n                        Math.max(0, refreshHints.ignoreDiffsAfter));\r\n                }\r\n\r\n                for (var i = from, rl = rows.length; i < to; i++) {\r\n                    if (i >= rl) {\r\n                        diff[diff.length] = i;\r\n                    } else {\r\n                        item = newRows[i];\r\n                        r = rows[i];\r\n\r\n                        if ((groupingInfos.length && (eitherIsNonData = (item.__nonDataRow) || (r.__nonDataRow)) &&\r\n                            item.__group !== r.__group ||\r\n                            item.__group && !item.equals(r))\r\n                            || (eitherIsNonData &&\r\n                                // no good way to compare totals since they are arbitrary DTOs\r\n                                // deep object comparison is pretty expensive\r\n                                // always considering them 'dirty' seems easier for the time being\r\n                                (item.__groupTotals || r.__groupTotals))\r\n                            || item[idProperty] != r[idProperty]\r\n                            || (updated && updated[item[idProperty]])\r\n                        ) {\r\n                            diff[diff.length] = i;\r\n                        }\r\n                    }\r\n                }\r\n                return diff;\r\n            }\r\n\r\n            function recalc(_items: any[]) {\r\n                rowsById = null;\r\n\r\n                if (refreshHints.isFilterNarrowing != prevRefreshHints.isFilterNarrowing ||\r\n                    refreshHints.isFilterExpanding != prevRefreshHints.isFilterExpanding) {\r\n                    filterCache = [];\r\n                }\r\n\r\n                var filteredItems = getFilteredAndPagedItems(_items);\r\n                totalRows = filteredItems.totalRows;\r\n                var newRows = filteredItems.rows;\r\n\r\n                summaryOptions.totals = {};\r\n\r\n                groups = [];\r\n                if (groupingInfos.length) {\r\n                    groups = extractGroups(newRows);\r\n                    if (groups.length) {\r\n                        addTotals(groups);\r\n                        newRows = flattenGroupedRows(groups);\r\n                    }\r\n                }\r\n\r\n                var diff = getRowDiffs(rows, newRows);\r\n\r\n                rows = newRows;\r\n\r\n                return diff;\r\n            }\r\n\r\n            function refresh() {\r\n                if (suspend) {\r\n                    return;\r\n                }\r\n\r\n                var countBefore = rows.length;\r\n                var totalRowsBefore = totalRows;\r\n\r\n                var diff = recalc(items); // pass as direct refs to avoid closure perf hit\r\n\r\n                updated = null;\r\n                prevRefreshHints = refreshHints;\r\n                refreshHints = {};\r\n\r\n                if (totalRowsBefore !== totalRows) {\r\n                    onPagingInfoChanged.notify(getPagingInfo(), null, self);\r\n                }\r\n                if (countBefore !== rows.length) {\r\n                    onRowCountChanged.notify({ previous: countBefore, current: rows.length, dataView: self }, null, self);\r\n                }\r\n                if (diff.length > 0) {\r\n                    onRowsChanged.notify({ rows: diff, dataView: self }, null, self);\r\n                }\r\n            }\r\n\r\n            /***\r\n             * Wires the grid and the DataView together to keep row selection tied to item ids.\r\n             * This is useful since, without it, the grid only knows about rows, so if the items\r\n             * move around, the same rows stay selected instead of the selection moving along\r\n             * with the items.\r\n             *\r\n             * NOTE:  This doesn't work with cell selection model.\r\n             *\r\n             * @param grid {Slick.Grid} The grid to sync selection with.\r\n             * @param preserveHidden {Boolean} Whether to keep selected items that go out of the\r\n             *     view due to them getting filtered out.\r\n             * @param preserveHiddenOnSelectionChange {Boolean} Whether to keep selected items\r\n             *     that are currently out of the view (see preserveHidden) as selected when selection\r\n             *     changes.\r\n             * @return {Slick.Event} An event that notifies when an internal list of selected row ids\r\n             *     changes.  This is useful since, in combination with the above two options, it allows\r\n             *     access to the full list selected row ids, and not just the ones visible to the grid.\r\n             * @method syncGridSelection\r\n             */\r\n            function syncGridSelection(grid: any, preserveHidden: boolean, preserveHiddenOnSelectionChange: boolean) {\r\n                var self = this;\r\n                var inHandler: any;\r\n                var selectedRowIds = self.mapRowsToIds(grid.getSelectedRows());\r\n                var onSelectedRowIdsChanged = new Slick.Event();\r\n\r\n                function setSelectedRowIds(rowIds: any[]) {\r\n                    if (selectedRowIds.join(\",\") == rowIds.join(\",\")) {\r\n                        return;\r\n                    }\r\n\r\n                    selectedRowIds = rowIds;\r\n\r\n                    onSelectedRowIdsChanged.notify({\r\n                        \"grid\": grid,\r\n                        \"ids\": selectedRowIds,\r\n                        \"dataView\": self\r\n                    }, new Slick.EventData(), self);\r\n                }\r\n\r\n                function update() {\r\n                    if (selectedRowIds.length > 0) {\r\n                        inHandler = true;\r\n                        var selectedRows = self.mapIdsToRows(selectedRowIds);\r\n                        if (!preserveHidden) {\r\n                            setSelectedRowIds(self.mapRowsToIds(selectedRows));\r\n                        }\r\n                        grid.setSelectedRows(selectedRows);\r\n                        inHandler = false;\r\n                    }\r\n                }\r\n\r\n                grid.onSelectedRowsChanged.subscribe(function (e: any, args: any) {\r\n                    if (inHandler) { return; }\r\n                    var newSelectedRowIds = self.mapRowsToIds(grid.getSelectedRows());\r\n                    if (!preserveHiddenOnSelectionChange || !grid.getOptions().multiSelect) {\r\n                        setSelectedRowIds(newSelectedRowIds);\r\n                    } else {\r\n                        // keep the ones that are hidden\r\n                        var existing = $.grep(selectedRowIds, function (id) { return self.getRowById(id) === undefined; });\r\n                        // add the newly selected ones\r\n                        setSelectedRowIds(existing.concat(newSelectedRowIds));\r\n                    }\r\n                });\r\n\r\n                this.onRowsChanged.subscribe(update);\r\n                this.onRowCountChanged.subscribe(update);\r\n\r\n                return onSelectedRowIdsChanged;\r\n            }\r\n\r\n            function syncGridCellCssStyles(grid: Slick.Grid, key: string) {\r\n                var hashById: any;\r\n                var inHandler: any;\r\n\r\n                // since this method can be called after the cell styles have been set,\r\n                // get the existing ones right away\r\n                storeCellCssStyles(grid.getCellCssStyles(key));\r\n\r\n                function storeCellCssStyles(hash: any) {\r\n                    hashById = {};\r\n                    for (var row in hash) {\r\n                        var id: any = rows[row][idProperty];\r\n                        hashById[id] = hash[row];\r\n                    }   \r\n                }\r\n\r\n                function update() {\r\n                    if (hashById) {\r\n                        inHandler = true;\r\n                        ensureRowsByIdCache();\r\n                        var newHash = {};\r\n                        for (var id in hashById) {\r\n                            var row = rowsById[id];\r\n                            if (row != undefined) {\r\n                                newHash[row] = hashById[id];\r\n                            }\r\n                        }\r\n                        grid.setCellCssStyles(key, newHash);\r\n                        inHandler = false;\r\n                    }\r\n                }\r\n\r\n                grid.onCellCssStylesChanged.subscribe(function (e, args) {\r\n                    if (inHandler) { return; }\r\n                    if (key != args.key) { return; }\r\n                    if (args.hash) {\r\n                        storeCellCssStyles(args.hash);\r\n                    }\r\n                });\r\n\r\n                this.onRowsChanged.subscribe(update);\r\n                this.onRowCountChanged.subscribe(update);\r\n            }\r\n\r\n            function addData(data: any) {\r\n\r\n                if (intf.onProcessData && data)\r\n                    data = intf.onProcessData(data, intf) || data;\r\n\r\n                errorMessage = null;\r\n                loading && loading.abort();\r\n                loading = false;\r\n\r\n                if (!data) {\r\n                    errorMessage = intf.errormsg;\r\n                    onPagingInfoChanged.notify(getPagingInfo());\r\n                    return false;\r\n                }\r\n\r\n                var theData = data;\r\n                data.TotalCount = data.TotalCount || 0;\r\n                data.Entities = data.Entities || [];\r\n\r\n                if (!data.Skip || (!intf.rowsPerPage && !data.Take))\r\n                    data.Page = 1;\r\n                else\r\n                    data.Page = Math.ceil(data.Skip / (data.Take || intf.rowsPerPage)) + 1;\r\n\r\n                page = data.Page;\r\n                totalCount = data.TotalCount;\r\n\r\n                setItems(data.Entities);\r\n\r\n                onPagingInfoChanged.notify(getPagingInfo());\r\n            }\r\n\r\n            function populate() {\r\n                if (populateLocks > 0) {\r\n                    populateCalls++;\r\n                    return;\r\n                }\r\n\r\n                populateCalls = 0;\r\n\r\n                loading && loading.abort();\r\n\r\n                if (intf.onSubmit) {\r\n                    var gh = intf.onSubmit(intf);\r\n                    if (gh === false)\r\n                        return false;\r\n                }\r\n\r\n                onDataLoading.notify(this);\r\n\r\n                if (!intf.url)\r\n                    return false;\r\n\r\n                // set loading event\r\n            \r\n                if (!intf.seekToPage)\r\n                    intf.seekToPage = 1;\r\n\r\n                var request: Serenity.ListRequest = {};\r\n\r\n                var skip = (intf.seekToPage - 1) * intf.rowsPerPage;\r\n                if (skip)\r\n                    request.Skip = skip;\r\n                if (intf.rowsPerPage)\r\n                    request.Take = intf.rowsPerPage;\r\n\r\n                if (intf.sortBy && intf.sortBy.length) {\r\n                    if (typeof intf.sortBy !== \"string\")\r\n                        request.Sort = intf.sortBy;\r\n                    else {\r\n                        request.Sort = [intf.sortBy];\r\n                    }\r\n                }\r\n\r\n                if (intf.params) {\r\n                    request = Q.extend(request, intf.params);\r\n                }\r\n\r\n                var dt = dataType;\r\n\r\n                var self = this;\r\n                var ajaxOptions = {\r\n                    cache: false,\r\n                    type: intf.method,\r\n                    contentType: contentType,\r\n                    url: intf.url,\r\n                    data: request,\r\n                    dataType: dt,\r\n                    success: function (response: Serenity.ServiceResponse) {\r\n                        loading = false;\r\n                        if (response.Error)\r\n                            Q.notifyError(response.Error.Message || response.Error.Code);\r\n                        else\r\n                            addData(response);\r\n                        onDataLoaded.notify(this);\r\n                    },\r\n                    error: function (xhr: any, status: any, ev: any) {\r\n                        loading = false;\r\n\r\n                        if ((xhr.getResponseHeader(\"content-type\") || '').toLowerCase().indexOf(\"application/json\") >= 0) {\r\n                            var json = $.parseJSON(xhr.responseText);\r\n                            if (json != null && json.Error != null) {\r\n                                Q.notifyError(json.Error.Message || json.Error.Code);\r\n                                onPagingInfoChanged.notify(getPagingInfo());\r\n                                onDataLoaded.notify(this);\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        errorMessage = xhr.errormsg;\r\n                        onPagingInfoChanged.notify(getPagingInfo());\r\n                        onDataLoaded.notify(this);\r\n                    },\r\n                    complete: function () {\r\n                        loading = false;\r\n                    }\r\n                }\r\n\r\n                if (intf.onAjaxCall) {\r\n                    var ah = intf.onAjaxCall(this, ajaxOptions);\r\n                    if (ah === false) {\r\n                        loading = false;\r\n                        onPagingInfoChanged.notify(getPagingInfo());\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                ajaxOptions.data = (<any>$).toJSON(ajaxOptions.data);\r\n\r\n                onPagingInfoChanged.notify(getPagingInfo());\r\n                loading = $.ajax(ajaxOptions);\r\n            }\r\n\r\n            function populateLock() {\r\n                if (populateLocks == 0)\r\n                    populateCalls = 0;\r\n                populateLocks++;\r\n            }\r\n\r\n            function populateUnlock() {\r\n                if (populateLocks > 0) {\r\n                    populateLocks--;\r\n                    if (populateLocks == 0 && populateCalls > 0)\r\n                        populate();\r\n                }\r\n            }\r\n\r\n            intf = {\r\n                // methods\r\n                \"beginUpdate\": beginUpdate,\r\n                \"endUpdate\": endUpdate,\r\n                \"setPagingOptions\": setPagingOptions,\r\n                \"getPagingInfo\": getPagingInfo,\r\n                \"getRows\": getRows,\r\n                \"getItems\": getItems,\r\n                \"setItems\": setItems,\r\n                \"setFilter\": setFilter,\r\n                \"sort\": sort,\r\n                \"fastSort\": fastSort,\r\n                \"reSort\": reSort,\r\n                \"setSummaryOptions\": setSummaryOptions,\r\n                \"getGrandTotals\": getGrandTotals,\r\n                \"setGrouping\": setGrouping,\r\n                \"getGrouping\": getGrouping,\r\n                \"collapseAllGroups\": collapseAllGroups,\r\n                \"expandAllGroups\": expandAllGroups,\r\n                \"collapseGroup\": collapseGroup,\r\n                \"expandGroup\": expandGroup,\r\n                \"getGroups\": getGroups,\r\n                \"getIdxById\": getIdxById,\r\n                \"getRowById\": getRowById,\r\n                \"getItemById\": getItemById,\r\n                \"getItemByIdx\": getItemByIdx,\r\n                \"mapRowsToIds\": mapRowsToIds,\r\n                \"mapIdsToRows\": mapIdsToRows,\r\n                \"setRefreshHints\": setRefreshHints,\r\n                \"setFilterArgs\": setFilterArgs,\r\n                \"refresh\": refresh,\r\n                \"updateItem\": updateItem,\r\n                \"insertItem\": insertItem,\r\n                \"addItem\": addItem,\r\n                \"deleteItem\": deleteItem,\r\n                \"syncGridSelection\": syncGridSelection,\r\n                \"syncGridCellCssStyles\": syncGridCellCssStyles,\r\n\r\n                \"getLength\": getLength,\r\n                \"getItem\": getItem,\r\n                \"getItemMetadata\": getItemMetadata,\r\n\r\n                \"onRowCountChanged\": onRowCountChanged,\r\n                \"onRowsChanged\": onRowsChanged,\r\n                \"onPagingInfoChanged\": onPagingInfoChanged,\r\n\r\n                \"addData\": addData,\r\n                \"populate\": populate,\r\n                \"populateLock\": populateLock,\r\n                \"populateUnlock\": populateUnlock,\r\n                \"onDataChanged\": onDataChanged,\r\n                \"onDataLoaded\": onDataLoaded,\r\n                \"onDataLoading\": onDataLoading\r\n            } as any;\r\n\r\n            idProperty = options.idField || 'id';\r\n            contentType = options.contentType || \"application/json\";\r\n            dataType = options.dataType || 'json';\r\n            filter = options.filter || null;\r\n\r\n            intf.params = options.params || {};\r\n            intf.onSubmit = options.onSubmit || null;\r\n            intf.url = options.url || null;\r\n            intf.rowsPerPage = options.rowsPerPage || 0;\r\n            intf.seekToPage = options.seekToPage || 1;\r\n            intf.onAjaxCall = options.onAjaxCall || null;\r\n            intf.onProcessData = options.onProcessData || null;\r\n            intf.method = options.method || 'POST';\r\n            intf.errormsg = intf.errormsg || Q.text(\"Controls.Pager.DefaultLoadError\");\r\n            intf.sortBy = typeof options.sortBy == \"string\" ? [options.sortBy] : (options.sortBy || []);\r\n            intf.idField = idProperty;\r\n\r\n            if (options.url && options.autoLoad) {\r\n                populate();\r\n            }\r\n\r\n            return intf;\r\n        }\r\n    }\r\n}\r\n\r\ndeclare namespace Slick {\r\n    \r\n    type CancellableViewCallback<TEntity> = (view: Slick.RemoteView<TEntity>) => boolean | void;\r\n    type RemoteViewAjaxCallback<TEntity> = (view: Slick.RemoteView<TEntity>, options: JQueryAjaxSettings) => boolean | void;\r\n    type RemoteViewFilter<TEntity> = (item: TEntity, view: Slick.RemoteView<TEntity>) => boolean;\r\n    type RemoteViewProcessCallback<TEntity> = (data: Serenity.ListResponse<TEntity>, view: Slick.RemoteView<TEntity>) => Serenity.ListResponse<TEntity>;\r\n\r\n    interface SummaryOptions {\r\n        aggregators: any[];\r\n    }\r\n\r\n    interface PagingOptions {\r\n        rowsPerPage?: number;\r\n        page?: number;\r\n    }\r\n\r\n    interface PagingInfo {\r\n        rowsPerPage: number;\r\n        page: number,\r\n        totalCount: number;\r\n        loading: boolean,\r\n        error: string;\r\n        dataView: RemoteView<any>\r\n    }\r\n\r\n    interface RemoteView<TEntity> {\r\n        constructor(options: RemoteViewOptions): void;\r\n        onSubmit: Slick.CancellableViewCallback<TEntity>;\r\n        onDataChanged: Slick.Event;\r\n        onDataLoaded: Slick.Event;\r\n        onPagingInfoChanged: Slick.Event;\r\n        getPagingInfo(): PagingInfo;\r\n        onAjaxCall: Slick.RemoteViewAjaxCallback<TEntity>;\r\n        onProcessData: Slick.RemoteViewProcessCallback<TEntity>;\r\n        addData(data: Serenity.ListResponse<TEntity>): void;\r\n        beginUpdate(): void;\r\n        endUpdate(): void;\r\n        deleteItem(id: any): void;\r\n        getItems(): TEntity[];\r\n        setFilter(filter: RemoteViewFilter<TEntity>): void;\r\n        setItems(items: any[], fullReset: boolean): void;\r\n        getItemById(id: any): TEntity;\r\n        getRowById(id: any): number;\r\n        updateItem(id: any, item: TEntity): void;\r\n        addItem(item: TEntity): void;\r\n        getIdxById(id: any): any;\r\n        getItemByIdx(index: number): any;\r\n        setGrouping(groupInfo: Slick.GroupInfo<TEntity>[]): void;\r\n        collapseAllGroups(level: number): void;\r\n        expandAllGroups(level: number): void;\r\n        expandGroup(keys: any[]): void;\r\n        collapseGroup(keys: any[]): void;\r\n        setSummaryOptions(options: Slick.SummaryOptions): void;\r\n        setPagingOptions(options: PagingOptions): void;\r\n        refresh(): void;\r\n        populate(): void;\r\n        populateLock(): void;\r\n        populateUnlock(): void;\r\n        getItem(row: number): any;\r\n        getLength(): number;\r\n        rowsPerPage: number;\r\n        errormsg: string;\r\n        params: any;\r\n        sortBy: string[];\r\n        url: string;\r\n        method: string;\r\n        idField: string;\r\n        seekToPage?: number;\r\n        loading: boolean;\r\n    }\r\n}\r\n","\r\ndeclare namespace Slick {\r\n    class AutoTooltips {\r\n        constructor(options: Slick.AutoTooltipsOptions);\r\n    }\r\n\r\n    interface AutoTooltipsOptions {\r\n        enableForHeaderCells?: boolean;\r\n        enableForCells?: boolean;\r\n        maxToolTipLength?: number;\r\n    }\r\n}","\r\ndeclare namespace Slick {\r\n    class RowMoveManager {\r\n        constructor(options: Slick.RowMoveManagerOptions);\r\n        onBeforeMoveRows: Slick.Event;\r\n        onMoveRows: Slick.Event;\r\n    }\r\n\r\n    interface RowMoveManagerOptions {\r\n        cancelEditOnDrag: boolean;\r\n    }\r\n}"]}